"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_assert_1 = tslib_1.__importDefault(require("node:assert"));
const util_1 = require("./util");
const options = JSON.parse(decodeURIComponent(process.argv[2]));
const script = options.script;
let heartbeatTimeout, done;
process.on('message', function (msg) {
    clearTimeout(heartbeatTimeout);
    heartbeatTimeout = null;
    if (msg == util_1.MESSAGE) {
        return;
    }
    try {
        msg = JSON.parse(msg);
        if (msg && msg.type == util_1.DATA) {
            process.emit('data', msg.data);
        }
    }
    catch (e) { }
});
process.sendData = function (data) {
    processSend(JSON.stringify({
        type: util_1.DATA,
        data: data
    }));
};
function processSend(msg) {
    try {
        process.send?.(msg, util_1.noop);
    }
    catch (e) { }
}
function errorHandler() {
    process.exit(1);
}
function keepAlive() {
    setTimeout(function () {
        processSend(util_1.MESSAGE);
        keepAlive();
    }, util_1.HEARTBEAT_INTERVAL);
    if (!heartbeatTimeout) {
        heartbeatTimeout = setTimeout(errorHandler, util_1.HEARTBEAT_TIMEOUT);
    }
}
function handleError(e) {
    const data = e ? e.stack || e.message || String(e) : 'unhandledRejection';
    if (typeof process._handlePforkUncaughtException === 'function' &&
        process._handlePforkUncaughtException(data, e) === false) {
        return;
    }
    processSend(JSON.stringify({
        type: util_1.ERROR,
        data: data
    }));
    setTimeout(errorHandler, util_1.HEARTBEAT_TIMEOUT);
}
process.on('unhandledRejection', handleError);
process.on('uncaughtException', handleError);
let execScript = require(script);
if (execScript.default)
    execScript = execScript.default;
(0, node_assert_1.default)(typeof execScript === 'function', script + ' not a function');
execScript(options, function (err, data) {
    if (done) {
        return;
    }
    done = true;
    if (err) {
        throw err;
    }
    else {
        processSend(JSON.stringify({
            type: util_1.MESSAGE,
            data: data
        }));
    }
});
keepAlive();
