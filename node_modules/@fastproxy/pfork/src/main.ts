import assert from 'node:assert';
import {DATA, ERROR, HEARTBEAT_INTERVAL, HEARTBEAT_TIMEOUT, MESSAGE, noop} from './util';

const options = JSON.parse(decodeURIComponent(process.argv[2]));
const script = options.script;
let heartbeatTimeout, done;

process.on('message', function (msg: any) {
  clearTimeout(heartbeatTimeout);
  heartbeatTimeout = null;
  if (msg == MESSAGE) {
    return;
  }
  try {
    msg = JSON.parse(msg);
    if (msg && msg.type == DATA) {
      process.emit('data' as any, msg.data);
    }
  } catch (e) {}
});

(process as any).sendData = function (data) {
  processSend(
    JSON.stringify({
      type: DATA,
      data: data
    })
  );
};

function processSend(msg: any) {
  try {
    process.send?.(msg, noop);
  } catch (e) {}
}

function errorHandler() {
  process.exit(1);
}

function keepAlive() {
  setTimeout(function () {
    processSend(MESSAGE);
    keepAlive();
  }, HEARTBEAT_INTERVAL);
  if (!heartbeatTimeout) {
    heartbeatTimeout = setTimeout(errorHandler, HEARTBEAT_TIMEOUT);
  }
}

function handleError(e) {
  const data = e ? e.stack || e.message || String(e) : 'unhandledRejection';
  if (
    typeof (process as any)._handlePforkUncaughtException === 'function' &&
    (process as any)._handlePforkUncaughtException(data, e) === false
  ) {
    return;
  }

  processSend(
    JSON.stringify({
      type: ERROR,
      data: data
    })
  );
  setTimeout(errorHandler, HEARTBEAT_TIMEOUT);
}
process.on('unhandledRejection', handleError);

process.on('uncaughtException', handleError);

let execScript = require(script);
if (execScript.default) execScript = execScript.default;
assert(typeof execScript === 'function', script + ' not a function');
execScript(options, function (err, data) {
  if (done) {
    return;
  }
  done = true;
  if (err) {
    throw err;
  } else {
    processSend(
      JSON.stringify({
        type: MESSAGE,
        data: data
      })
    );
  }
});
keepAlive();
