"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const tslib_1 = require("tslib");
const commander_1 = tslib_1.__importDefault(require("commander"));
const cli = tslib_1.__importStar(require("./cli"));
exports.cli = tslib_1.__importStar(require("./cli"));
// 只能通过这种方式引入
const pkgInfo = require('../package.json');
let config;
let bingo = false;
/* eslint no-console: "off" */
commander_1.default.usage('<command> [options]');
commander_1.default.setConfig = function (conf) {
    config = conf;
    if (config.execPath) {
        process.env.STARTING_EXEC_PATH = process.env.STARTING_EXEC_PATH || config.execPath;
    }
    return this;
};
commander_1.default.getConfig = function (name) {
    if (!config) {
        config = {};
    }
    const _config = {};
    const options = getOptions();
    Object.keys(config).forEach(name => {
        if (!/Callback$/.test(name) && typeof config[name] === 'function') {
            _config[name] = config[name](options);
        }
        else {
            _config[name] = config[name];
        }
    });
    return arguments.length > 0 ? _config[name] : _config;
};
commander_1.default.parse_ = commander_1.default.parse;
function getMaxHttpHeaderSize(argv) {
    for (let i = 3, len = argv.length; i < len; i++) {
        const name = argv[i];
        if (name === '--max-http-header-size') {
            const size = argv[i + 1];
            argv.splice(i, 1);
            if (size && size[0] !== '-') {
                argv.splice(i + 1, 1);
            }
            return size > 0 ? size : 0;
        }
        if (/^--max-http-header-size=([^\s]+)$/.test(name)) {
            argv.splice(i, 1);
            return parseInt(RegExp.$1, 10) > 0 ? RegExp.$1 : 0;
        }
    }
    return 0;
}
commander_1.default.parse = function (argv) {
    if (!commander_1.default.optionFor('--version')) {
        commander_1.default.version(commander_1.default.getConfig('version') || pkgInfo.version);
    }
    commander_1.default
        .command('run')
        .description('Start a front service')
        .action(() => {
        bingo = true;
        cli.run(commander_1.default.getConfig('main'), getOptions(), commander_1.default.getConfig('runCallback'));
    });
    commander_1.default
        .command('start')
        .description('Start a background service')
        .action(() => {
        bingo = true;
        cli.start(commander_1.default.getConfig('main'), getOptions(), commander_1.default.getConfig('startCallback'), commander_1.default.getConfig('version'));
    });
    commander_1.default
        .command('stop')
        .description('Stop current background service')
        .action(() => {
        bingo = true;
        cli.stop(commander_1.default.getConfig('main'), commander_1.default.getConfig('stopCallback'));
    });
    commander_1.default
        .command('restart')
        .description('Restart current background service')
        .action(() => {
        bingo = true;
        cli.restart(commander_1.default.getConfig('main'), getOptions(), commander_1.default.getConfig('restartCallback'), commander_1.default.getConfig('version'));
    });
    commander_1.default
        .command('help')
        .description('Display help information')
        .action(() => {
        bingo = true;
        commander_1.default.help();
    });
    argv = Array.prototype.slice.call(argv || process.argv || []);
    commander_1.default.__maxHttpHeaderSize = getMaxHttpHeaderSize(argv);
    commander_1.default.parse_(argv);
    if (!bingo) {
        console.log(`Type '${commander_1.default.getConfig('name') || pkgInfo.name} help' for usage.`);
    }
    return commander_1.default;
};
function getOptions() {
    const options = {
        __maxHttpHeaderSize: commander_1.default.__maxHttpHeaderSize,
        clearPreOptions: commander_1.default.prevOptions === false,
        noGlobalPlugins: commander_1.default.globalPlugins === false
    };
    Object.keys(commander_1.default).forEach(name => {
        if (commander_1.default.optionFor(`--${name}`)) {
            options[name] = commander_1.default[name];
        }
    });
    return options;
}
exports.default = commander_1.default;
