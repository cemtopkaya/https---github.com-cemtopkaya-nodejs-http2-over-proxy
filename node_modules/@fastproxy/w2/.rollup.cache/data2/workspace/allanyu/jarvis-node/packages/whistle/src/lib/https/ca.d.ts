/// <reference types="node" />
/// <reference types="lru-cache" />
/// <reference types="node-forge" />
import { LRU, forge, tls } from '../import-pkg';
type JSObject = Record<string, any>;
export declare const createSecureContext: typeof tls.createSecureContext;
export declare const CUSTOM_CERTS_DIR: string | null;
export declare const remoteCerts: LRU.Cache<string, any>;
export declare function getDomain(hostname: any): any;
export declare const existsCustomCert: (hostname: any) => any;
export declare const hasCustomCerts: () => number;
export declare const createCertificate: (hostname: any) => any;
export declare const createRootCA: (opts: any) => {
    key: forge.pki.rsa.PrivateKey;
    cert: forge.pki.Certificate;
};
export declare function getRootCAFile(): string;
export declare const SNICallback: (servername: any, cb: any) => void;
export declare const getRootCA: () => {
    key: any;
    cert: any;
};
export declare const getCustomCertsInfo: () => JSObject;
export declare const getCustomCertsFiles: () => JSObject;
export declare const serverAgent: any;
export declare const getHttp2Server: (listener: any, callback: any) => any;
export declare const getSNIServer: (listener: any, callback: any, disableH2: any, requestCert: any) => any;
export declare var hasInvalidCerts: boolean;
export declare const removeCert: (filename: any) => void;
export declare const uploadCerts: (certs: any) => void;
export {};
