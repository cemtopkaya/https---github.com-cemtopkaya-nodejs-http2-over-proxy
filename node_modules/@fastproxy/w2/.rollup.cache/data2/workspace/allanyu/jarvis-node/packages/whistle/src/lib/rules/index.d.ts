import type { PluginMgr } from '../plugins';
import Rules from './rules';
export declare let getPlugin: PluginMgr['getActivePluginByName'];
/**
 * è®¾ç½®getPluginå‡½æ•°
 */
export declare const setGetPluginFn: (arg: (name: string) => any) => (name: string) => any;
declare let parse: (text: any, root: any, _values: any) => void;
export { Rules, parse };
export declare const append: (text: any, root: any) => void;
export declare const resolveSNICallback: (req: any) => any;
export declare const resolveHost: (req: any, callback: any, pluginRulesMgr?: any, rulesFileMgr?: any, headerRulesMgr?: any) => any;
export declare const resolveInternalHost: (req: any) => string | undefined;
export declare const resolveProxy: (req: any, host: any) => any;
export declare const resolveEnable: (req: any) => any;
export declare const hasReqScript: (req: any) => any;
export declare const resolveDisable: (req: any) => any;
export declare const resolvePipe: (req: any) => any;
export declare const resolveRule: (req: any) => any;
export declare const resolveRules: (req: any) => {
    [x: string]: any;
};
export declare const resolveResRules: (req: any) => {
    [x: string]: any;
};
export declare const resolveBodyFilter: (req: any) => any;
export declare const lookupHost: (req: any, callback: any) => void;
export declare const resolveLocalRule: (req: any) => any;
export declare const clearAppend: () => void;
export declare const disableDnsCache: () => void;
export declare const getProxy: (url: any, req: any, callback: any) => any;
export declare function execRulesScript(script: any, req: any, res: any, body: any, pattern: any): {
    rules: any;
    values: any;
} | undefined;
export declare function resolveRulesFile(req: any, callback: any): void;
export declare const resolveResRulesFile: (req: any, res: any, callback: any) => void;
export declare function initHeaderRules(req: any, needBodyFilters?: boolean): void;
export declare function initRules(req: any): any;
export declare const getClientCert: (req: any, cb: any) => any;
