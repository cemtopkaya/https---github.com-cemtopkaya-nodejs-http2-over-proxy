import fs from 'fs';
import path from 'path';
// common about
export { default as crypto, createHmac } from 'crypto';
export { default as extend } from 'extend';
export { EventEmitter } from 'events';
export { default as json5 } from 'json5';
export { default as cluster } from 'cluster';
export { default as os } from 'os';
export { default as assert } from 'assert';
// fs,file,process
export { default as fs } from 'fs';
export { default as path } from 'path';
export { default as fse } from 'fs-extra2';
export { default as LRU } from 'lru-cache';
export { Buffer } from 'safe-buffer';
export { default as AdmZip } from 'adm-zip';
export { parseString } from 'xml2js';
export { default as Zip } from 'node-native-zip2';
export { PassThrough } from 'stream';
// process about
export { default as cp } from 'child_process';
// network about
export { default as dns } from 'dns';
export { default as net } from 'net';
export { default as tls } from 'tls';
export { default as http } from 'http';
export { Agent as HttpAgent } from 'http';
export { Agent as HttpsAgent } from 'https';
export { default as https } from 'https';
export { default as http2 } from 'http2';
export { default as socks } from 'sockx';
export { default as hagent } from 'hagent';
export { agent as tunnel, create as createAgent, getServer as getAgentServer } from 'hagent';
export { default as qs } from 'querystring';
export { parse as parseQuery } from 'querystring';
export { default as url } from 'url';
export { parse as parseUrl } from 'url';
export { default as hparser } from 'hparser';
export { default as wsParser } from 'ws-parser';
export { default as multer } from 'multer2';
export { default as forge } from 'node-forge';
export { default as mime } from 'mime';
// framework about
export { default as express } from 'express';
export { default as bodyParser } from 'body-parser';
export { default as Pac } from 'node-pac';
export { default as checkSNI } from 'sni';
export { default as iconv } from 'iconv-lite';
export const pkgInfo = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../../package.json'), {
    encoding: 'utf-8'
}));
