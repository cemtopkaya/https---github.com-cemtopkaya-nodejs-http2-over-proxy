import { Transform } from 'pipestream';
const LENGTH = 5120;
const slice = [].slice;
const SUB_MATCH_RE = /(^|\\{0,2})?(\$[&\d])/g;
const ALL_RE = /^\/\.[*+]\/g?i?g?$/;
const MAX_SUB_MATCH_LEN = 512;
export default class ReplacePatternTransform extends Transform {
    constructor(pattern, value) {
        super();
        this._transform = (chunk, _, callback) => {
            const value = this._value;
            if (this._replaceAll) {
                this._value = '';
                chunk = value;
            }
            else if (chunk != null) {
                chunk = this._rest + chunk;
                let index = 0;
                const len = chunk.length - MAX_SUB_MATCH_LEN;
                const result = chunk.replace(this._pattern, (...args) => {
                    const matcher = args[0];
                    const matcherLen = matcher.length;
                    const i = args[args.length - 2] + matcherLen;
                    const subLen = i - len;
                    if (subLen >= 0 && matcherLen <= LENGTH - subLen) {
                        return matcher;
                    }
                    index = i;
                    return ReplacePatternTransform.replacePattern(value, args);
                });
                index = Math.max(index, chunk.length - LENGTH);
                this._rest = chunk.substring(index);
                chunk = result.substring(0, result.length - this._rest.length);
            }
            else if (this._rest) {
                chunk = this._rest.replace(this._pattern, (...args) => {
                    return ReplacePatternTransform.replacePattern(value, args);
                });
            }
            callback(null, chunk);
        };
        this._pattern = pattern;
        this._replaceAll = ALL_RE.test(pattern);
        this._value = value == null ? '' : value + '';
        this._rest = '';
    }
}
ReplacePatternTransform.replacePattern = (replacement, args) => {
    const arr = args.length ? getSubMatchers(args) : args;
    return replacement
        ? replacement.replace(SUB_MATCH_RE, function (_, $1, $2) {
            if ($1 === '\\') {
                return $2;
            }
            if ($1 === '\\\\') {
                $1 = '\\';
            }
            $2 = $2.substring(1);
            if ($2 === '&') {
                $2 = 0;
            }
            return ($1 || '') + (arr[$2] || '');
        })
        : '';
};
function getSubMatchers(args) {
    args = slice.call(args);
    return args.slice(0, -2);
}
