import http from 'http';
import https from 'https';
import { parse as parseUrl } from 'url';
import net from 'net';
import path from 'path';
import { StringDecoder as StringDecoder } from 'string_decoder';
import fs from 'fs';
import fse from 'fs-extra2';
import socks from 'sockx';
import { Server as WebSocketServer } from 'ws';
import { serverAgent } from 'hagent';
import createDebug from 'debug';
import startWhistle from '../index';
import { getValues, noop, request } from './utils';
import config from './config';
const debug = createDebug('@w2.tests.setup');
const WHISTLE_PATH = (process.env.WHISTLE_PATH = path.resolve(__dirname, '../../__tests__/'));
const PLUGINS_PATH = path.join(WHISTLE_PATH, '.jwhistle/node_modules');
fse.removeSync(path.join(WHISTLE_PATH, '.jwhistle'));
fse.copySync(path.join(WHISTLE_PATH, './plugins'), PLUGINS_PATH);
let count = 6;
const initializer = {
    createWebSocketServer: (wsPort) => {
        const wss = new WebSocketServer({ port: wsPort });
        wss.on('connection', function connection(ws) {
            const req = ws.upgradeReq;
            ws.on('message', function (msg) {
                ws.send(JSON.stringify({
                    type: 'server',
                    method: req.method,
                    headers: req.headers,
                    body: msg
                }, null, '\t'));
            });
        });
    },
    createHttpServer: (serverPort, startTest) => {
        http
            .createServer(function (req, res) {
            req.on('error', noop);
            res.on('error', noop);
            let body = '';
            const decoder = new StringDecoder('utf8');
            req.on('data', function (data) {
                body += decoder.write(data);
            });
            req.on('end', function () {
                body += decoder.end();
                res.end(JSON.stringify({
                    type: 'server',
                    url: req.url,
                    method: req.method,
                    headers: req.headers,
                    body: body
                }, null, '\t'));
            });
        })
            .listen(serverPort, startTest);
    },
    createHttpsServer: (httpsPort, startTest) => {
        const options = {
            key: fs.readFileSync(path.join(__dirname, '../../__tests__/assets/certs/root.key')),
            cert: fs.readFileSync(path.join(__dirname, '../../__tests__/assets/certs/_root.crt'))
        };
        https
            .createServer(options, function (req, res) {
            if (req.url.indexOf('test-remote.rules') !== -1) {
                return res.end('str2.w2.org/index.html file://`(${search.replace(a,b)})`\nstr2.w2.org/index2.html file://`(${query.replace(/a/g,b)})`');
            }
            res.end(JSON.stringify({
                headers: req.headers,
                body: 'test'
            }));
        })
            .listen(httpsPort, startTest);
    },
    createProxyHttpServer: (proxyPort, startTest) => {
        /**
         * 不用处理异常
         */
        const server = http.createServer(function (req, res) {
            const fullUrl = /^http:/.test(req.url) ? req.url : 'http://' + req.headers.host + req.url;
            const options = parseUrl(fullUrl);
            delete options.hostname;
            options.host = '127.0.0.1';
            options.method = req.method;
            options.headers = req.headers;
            const client = http.request(options, function (_res) {
                _res.pipe(res);
            });
            req.pipe(client);
        });
        server.on('connect', function (req, socket) {
            const tunnelUrl = 'tunnel://' + (/^[^:\/]+:\d+$/.test(req.url) ? req.url : req.headers.host);
            const options = parseUrl(tunnelUrl);
            const client = net.connect({
                host: '127.0.0.1',
                port: options.port ? parseInt(options.port) : 443
            }, function () {
                socket.pipe(client).pipe(socket);
                socket.write('HTTP/1.1 200 Connection Established\r\nProxy-Agent: whistle/test\r\n\r\n');
            });
        });
        server.listen(proxyPort, startTest);
        return server;
    },
    createSocksServer: (socksPort, startTest) => {
        const socksServer = socks.createServer(function (info, accept, deny) {
            let socket;
            let client;
            if (info.dstPort === 443) {
                if ((socket = accept(true))) {
                    client = net.connect({
                        host: '127.0.0.1',
                        port: 5566
                    }, function () {
                        socket.pipe(client).pipe(socket);
                    });
                }
                return;
            }
            if (info.dstPort === 8081) {
                if ((socket = accept(true))) {
                    client = net.connect({
                        host: '127.0.0.1',
                        port: 8081
                    }, function () {
                        socket.pipe(client).pipe(socket);
                    });
                }
                return;
            }
            if ((socket = accept(true))) {
                const body = JSON.stringify({
                    port: config.socksPort
                });
                socket.end([
                    'HTTP/1.1 200 OK',
                    'Connection: close',
                    'Content-Type: text/plain;charset=utf8',
                    'Content-Length: ' + Buffer.byteLength(body),
                    '',
                    body
                ].join('\r\n'));
            }
        });
        socksServer.useAuth(socks.auth.None());
        socksServer.listen(socksPort, startTest);
        return socksServer;
    },
    createAuthSocksServer: (authSocksPort, startTest) => {
        const authSocksServer = socks.createServer(function (info, accept, deny) {
            let socket;
            if (info.dstPort === 443) {
                if ((socket = accept(true))) {
                    const client = net.connect({
                        host: '127.0.0.1',
                        port: 5566
                    }, function () {
                        socket.pipe(client).pipe(socket);
                    });
                }
                return;
            }
            if ((socket = accept(true))) {
                const body = JSON.stringify({
                    port: config.authSocksPort
                });
                socket.end([
                    'HTTP/1.1 200 OK',
                    'Connection: close',
                    'Content-Type: text/plain;charset=utf8',
                    'Content-Length: ' + Buffer.byteLength(body),
                    '',
                    body
                ].join('\r\n'));
            }
        });
        authSocksServer.useAuth(socks.auth.UserPassword(function (user, password, cb) {
            cb(user === 'test' && password === 'hello1234');
        }));
        authSocksServer.listen(authSocksPort, startTest);
        return authSocksServer;
    },
    execStartWhistle: () => {
        const values = getValues();
        values['options.html'] = {
            method: 'options'
        };
        const defaultRules = fs.readFileSync(path.join(__dirname, '../../__tests__/rules.txt'), {
            encoding: 'utf8'
        });
        const proxy = startWhistle({
            port: config.port,
            storage: 'test_',
            mode: 'strict',
            httpPort: config.httpServerPort,
            httpsPort: config.httpsServerPort,
            certDir: path.join(__dirname, '../../__tests__/assets/certs'),
            debugMode: true,
            localUIHost: 'local.whistle.com|local2.whistle.com&localn.whistle.com',
            pluginHost: 'test=test.local.whistle.com|b.test.local.whistle.com&test3.local.whistle.com,',
            rules: {
                Default: defaultRules,
                test: {
                    rules: 'test.options.com file://{options.html}\n@' +
                        path.join(__dirname, '../../__tests__/assets/files/rules.txt') +
                        '\n@https://127.0.0.1:' +
                        config.httpsPort +
                        '/test-remote.rules',
                    enable: true
                },
                abc: '123'
            },
            values: values,
            copy: true
        }, startTest);
        proxy.on('tunnelRequest', noop);
        proxy.on('wsRequest', noop);
        proxy.on('_request', noop);
        proxy.setUIHost('_');
        proxy.setUIHost();
        proxy.setPluginUIHost('test', '_');
        proxy.setPluginUIHost('whistle.test', '');
    }
};
function startTest() {
    if (--count > 0) {
        console.log(`startTest invoke ${count}`);
        return;
    }
}
let index = 0;
async function getData() {
    const waitServerOk = await new Promise(resolve => {
        setInterval(() => {
            if (count === 0)
                resolve('ok');
        }, 1000);
    });
    debug('waitServerOk: %s', waitServerOk);
    const query = '?name=host&value=com&url=com';
    let dataUrl = 'http://local.whistlejs.com/cgi-bin/get-data';
    if (++index > 2) {
        index = 0;
        dataUrl += query + 'ip=self,1.1.1.1';
    }
    else if (index === 1) {
        dataUrl += query + 'ip=self';
    }
    const res = await request(dataUrl);
}
const main = async () => {
    const isServerReady = getData();
    //Node7及以下使用非SNI Server
    if (parseInt(process.versions.modules, 10) <= 51) {
        serverAgent.existsServer = function () {
            return true;
        };
    }
    initializer.createWebSocketServer(config.wsPort);
    initializer.createHttpServer(config.serverPort, startTest);
    initializer.createHttpsServer(config.httpsPort, startTest);
    initializer.execStartWhistle();
    initializer.createSocksServer(config.socksPort, startTest);
    initializer.createAuthSocksServer(config.authSocksPort, startTest);
    initializer.createProxyHttpServer(config.proxyPort, startTest);
    await isServerReady;
};
export default main;
