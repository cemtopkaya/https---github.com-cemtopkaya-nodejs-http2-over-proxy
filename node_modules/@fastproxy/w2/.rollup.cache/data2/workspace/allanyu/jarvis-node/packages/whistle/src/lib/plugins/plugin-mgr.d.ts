/// <reference types="node" />
import { EventEmitter } from '../import-pkg';
type JSObject = Record<string, any>;
export type Plugin = Record<string, any>;
export declare class PluginMgr extends EventEmitter {
    constructor();
    getTunnelKeys: () => any;
    updateRules: () => void;
    loadCert: (req: any, plugin: any, callback: any) => void;
    addRuleHeaders: (req: any, rules: any, headers?: any, isPipe?: boolean) => any;
    loadPlugin: (plugin: any, callback: (err?: Error | null, msg?: string) => void) => void;
    loadPluginByName: (name: any, callback: any) => void;
    getActivePluginByName: (name: string) => Plugin | null;
    stopPlugin: (plugin: any) => void;
    getPlugins: () => Record<string, Plugin>;
    isDisabled: (name: string) => any;
    getPlugin: (protocol: any) => Plugin | null;
    getPluginByName: (name: any) => any;
    getPluginByRuleUrl: (ruleUrl?: string) => Plugin | null | undefined;
    loadAuthPlugins: (req: any, callback: any) => any;
    resolvePipePlugin: (req: any, callback: any) => void;
    postStats: (req: any, res?: any) => void;
    resolveWhistlePlugins: (req: any) => Plugin | null | undefined;
    updatePluginRules: (name: any) => void;
    setProxy: (p: any) => void;
    getWsPipe: (req: any, res: any, callback: any) => void;
    getTunnelPipe: (req: any, res: any, callback: any) => void;
    getRules: (req: any, callback: any) => void;
    getResRules: (req: any, res: any, callback: any) => void;
    getTunnelRules: (req: any, callback: any) => void;
    private getRulesMgr;
    private getRulesFromPlugins;
    private getPluginRulesCallback;
    resolveKey: (url: any, rule: any, req: any) => {
        originalKey: any;
        pluginName: string;
        maxLength: number;
        url: string;
        headers: any;
    } | undefined;
    requestText: (options: any, callback: any) => any;
    requestBin: (options: any, callback: any) => any;
    getPipe: (type: string, hookName: string) => (req: any, res?: JSObject | ((socket?: any) => void) | undefined, callback?: ((socket?: any) => void) | undefined) => void;
    getReqReadPipe: (req: any, res?: JSObject | ((socket?: any) => void) | undefined, callback?: ((socket?: any) => void) | undefined) => void;
    getReqWritePipe: (req: any, res?: JSObject | ((socket?: any) => void) | undefined, callback?: ((socket?: any) => void) | undefined) => void;
    getResReadPipe: (req: any, res?: JSObject | ((socket?: any) => void) | undefined, callback?: ((socket?: any) => void) | undefined) => void;
    getResWritePipe: (req: any, res?: JSObject | ((socket?: any) => void) | undefined, callback?: ((socket?: any) => void) | undefined) => void;
    private getWsReqReadPipe;
    private getWsReqWritePipe;
    private getWsResReadPipe;
    private getWsResWritePipe;
    private getTunnelReqReadPipe;
    private getTunnelReqWritePipe;
    private getTunnelResReadPipe;
    private getTunnelResWritePipe;
    private _loadPlugins;
    private loadPlugins;
    private getOptions;
    private getPluginByPluginRule;
}
export declare const pluginMgr: PluginMgr;
export {};
