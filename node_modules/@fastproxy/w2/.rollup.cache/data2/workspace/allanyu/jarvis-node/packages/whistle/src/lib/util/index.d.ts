/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import http from 'http';
import os from 'os';
import { PassThrough } from 'stream';
import zlib from 'zlib';
import LRU from 'lru-cache';
import { Buffer } from 'safe-buffer';
import isUtf8 from './is-utf8';
import * as fileMgr from './file-mgr';
import * as httpMgr from './http-mgr';
import parseQuery from './parse-query';
import proc from './process';
import parseUrl from './parse-url';
export interface Rule {
    rawFiles?: string[];
    files?: string[];
    root?: string;
    value?: string;
    path?: string;
    url?: string;
    matcher?: string;
}
type ConnectOptions = Record<string, any>;
export { default as SpeedTransform } from './speed-transform';
export { default as FileWriterTransform } from './file-writer-transform';
export { getServer } from 'hagent';
export { listenerCount } from './patch';
export declare const request: typeof httpMgr.request;
export { indexOf as indexOfList } from './buf-util';
export { hasProtocol, removeProtocol, setProtocol, getProtocol, replaceProtocol, lowerCaseify, removeIPV6Prefix, hasBody, isHead, isEmptyObject, addTrailerNames, removeIllegalTrailers, getUpdateUrl, onResEnd, encodeHtml } from './common';
export declare const toBuffer: typeof fileMgr.toBuffer;
declare const localIpCache: LRU.Cache<string, boolean>;
declare const replacePattern: (replacement: any, args: any) => any;
export declare const EMPTY_BUFFER: globalThis.Buffer | Buffer | null;
declare const INTERNAL_ID: string;
export declare const workerIndex: any;
export { default as ReplacePatternTransform } from './replace-pattern-transform';
export { default as ReplaceStringTransform } from './replace-string-transform';
export { default as WhistleTransform } from './whistle-transform';
export { proc, INTERNAL_ID, isUtf8, parseQuery, parseUrl, localIpCache, replacePattern };
export declare const PLUGIN_VALUES: unique symbol;
export declare const PLUGIN_MENU_CONFIG: unique symbol;
export declare const PLUGIN_INSPECTOR_CONFIG: unique symbol;
export * from './drain';
export declare const isWin: boolean;
export declare function noop(_: any): any;
export declare function isUrl(str: any): boolean;
export declare function isCiphersError(e: any): boolean;
export declare const parseRawJson: (str: any) => any;
export declare function getRegistry(pkg: any): any;
export declare function getLatestVersion(registry: any, cb: any): any;
export declare const setEstablished: (socket: any) => void;
export declare function changePort(url: any, port: any): any;
export declare function handleStatusCode(statusCode: any, headers: any): any;
export declare function getStatusCode(statusCode: any): any;
export declare function compare(v1: any, v2: any): 1 | -1 | 0;
export declare function execScriptSync(script: any, context: any): boolean;
export declare function getFileWriters(files: any, callback: any, force: any): void;
export declare function getErrorStack(err: any): string;
export declare function formatDate(now?: Date): string;
export declare const isRegExp: (regExp: any) => boolean;
export declare function isOriginalRegExp(regExp: any): boolean;
export declare function toOriginalRegExp(regExp: any): any;
export declare const emitError: (obj: any, err: any) => void;
export declare const startWithList: (buf: any, subBuf: any, start?: number) => boolean;
export declare const endWithList: (buf: any, subBuf: any, end: any) => boolean;
export declare function isEnable(req: any, name: any): any;
export declare const getInternalHost: (req: any, host: any) => any;
export declare function isAuthCapture(req: any): any;
export declare const toRegExp: (regExp: any, ignoreCase?: boolean) => any;
export declare function isString(str: any): any;
export declare function getFullUrl(req: any): string;
export declare function disableCSP(headers: any): void;
export declare const setClientId: (headers: any, enable: any, disable: any, clientIp: any, isInternalProxy: any) => void;
export declare function getClientId(headers: any): any;
export declare const getTunnelKey: (conf: any) => any;
export declare function getComposerClientId(headers: any): any;
export declare const removeClientId: (headers: any) => void;
export declare function networkInterfaces(): NodeJS.Dict<os.NetworkInterfaceInfo[]>;
/**
 * FIXME: 之前是提供hostname别名的, 但会和块作用域里的变量冲突
 * export const hostname = getHostname;
 */
export declare function getHostname(): string;
export declare function getProxyTunnelPath(req: any, isHttps: any): any;
export declare function isLocalAddress(address: any): boolean;
export declare function isLocalHost(host: any): boolean;
export declare function parseHost(host: any): any;
/**
 * 解析一些字符时，encodeURIComponent可能会抛异常，对这种字符不做任何处理
 * see: http://stackoverflow.com/questions/16868415/encodeuricomponent-throws-an-exception
 * @param ch
 * @returns
 */
declare function safeEncodeURIComponent(ch: string): string;
export declare const encodeNonLatin1Char: (str: any) => any;
export declare const encodeURIComponent: typeof safeEncodeURIComponent;
export declare function getPath(url?: string, noProtocol?: boolean): string | undefined;
export declare function getFilename(url: any): any;
export declare function disableReqCache(headers: any): void;
export declare function disableResStore(headers: any): void;
export declare function parsePathReplace(urlPath: any, params: any): any;
export declare function wrapResponse(res: any): PassThrough & {
    statusCode?: number | undefined;
    rawHeaderNames?: any;
    headers?: Record<string, any> | undefined;
    isCustomRes?: boolean | undefined;
};
export declare function wrapGatewayError(body: any): PassThrough & {
    statusCode?: number | undefined;
    rawHeaderNames?: any;
    headers?: Record<string, any> | undefined;
    isCustomRes?: boolean | undefined;
};
export declare function sendStatusCodeError(cltRes: any, svrRes: any): void;
export declare const getQueryValue: (value: any) => any;
export declare function parseJSON(data: any): any;
export declare function readFileSync(file: any): globalThis.Buffer | undefined;
export declare function trim(text: any): any;
export declare function readInjectFiles(data: any, callback: any): any;
export declare function parseHeaders(headers: any, rawNames: any): Record<string, any>;
export declare const parseRuleJson: (rules: any, callback: any, req: any) => void;
export declare const getRuleValue: (rules: any, callback: any, noBody: any, charset: any, isHtml: any, req: any) => any;
export declare const getRuleFiles: (rule: Rule, req: any) => any;
export declare const getRuleFile: (rule: Rule) => any;
declare function getMatcher(rule?: Rule, raw?: boolean): string | undefined;
declare function getUrl(rule?: Rule): string | undefined;
export declare const rule: {
    getMatcher: typeof getMatcher;
    getUrl: typeof getUrl;
};
export declare function getMatcherValue(rule: any): any;
export declare function getUrlValue(rule: any, raw: any): any;
export declare function getRawType(data: any): string;
export declare function getContentType(contentType: any): "JS" | "CSS" | "HTML" | "JSON" | "XML" | "TEXT" | "IMG" | undefined;
export declare function supportHtmlTransform(res: any, req: any): boolean;
export declare function removeUnsupportsHeaders(headers: any, supportsDeflate?: boolean): void;
export declare function hasRequestBody(req: any): boolean;
export declare function getContentEncoding(headers: any): any;
export declare function getZipStream(headers: any): zlib.Gzip | null;
export declare function getUnzipStream(headers: any): zlib.Gunzip | null;
export declare const isWhistleTransformData: (obj: any) => boolean;
export declare function getPipeIconvStream(headers: any): any;
export declare function toLowerCase(str: any): any;
export declare function toUpperCase(str: any): any;
export declare function getCharset(str: any): string | undefined;
export declare function getForwardedFor(headers: any): any;
export declare function getRemoteAddr(req: any): any;
export declare function getClientIp(req: any): any;
export declare function getRemotePort(req: any): any;
export declare const getClientPort: (req: any) => any;
export declare function isUrlEncoded(req: any): boolean;
export declare function isJSONContent(req: any): boolean;
export declare function isProxyPort(proxyPort: any): boolean;
export declare const isLocalPHost: (req: any, isHttps: any) => boolean;
export declare function isMultipart(req: any): boolean;
export declare function getQueryString(url: any): any;
export declare function replaceQueryString(query: any, replaceQuery: any): any;
export declare function replaceUrlQueryString(url: any, queryString: any): any;
export declare const decodeBuffer: typeof fileMgr.decode;
export declare function setHeaders(data: any, obj: any): any;
export declare function setHeader(data: any, name: any, value: any): any;
export declare function join(root: any, dir: any): any;
export declare function resolveProperties(list: any, result?: any): any;
export declare const parseLineProps: (str: any) => Record<string, any> | undefined;
export declare function resolveFilter(ignore: any, filter: any): any;
export declare const isIgnored: (filter: any, name: any) => any;
export declare function exactIgnore(filter: any, rule: any): any;
export declare const checkSkip: (skip: any, rule: any, curUrl: any) => boolean;
export declare function ignoreRules(rules: any, ignore: Record<string, any>, isResRules?: boolean): void;
export declare function filterRepeatPlugin(rule: any): void;
export declare function mergeRules(req: any, add: any, isResRules?: boolean): any;
export declare function parseHeaderReplace(rule: any): "";
export declare function handleHeaderReplace(headers: any, opList: any): void;
export declare function transformReq(req: any, res: any, port: number, host?: string): http.ClientRequest;
export declare function trimStr(str: any): string;
export declare function checkIfAddInterceptPolicy(proxyHeaders: any, headers: any): boolean;
export declare function getCgiUrl(url: any): any;
export declare const getCustomTab: (tab: any, pluginName: any) => {
    action: string;
    name: any;
} | undefined;
export declare function getString(str: any): any;
export declare const getPluginMenu: (menus: any, pluginName: any) => Record<string, any>[] | undefined;
export declare function getHintList(conf: any, isVar?: boolean): any;
export declare const getPluginVarsConf: (conf: any) => true | {
    hintUrl: any;
    hintList: any;
} | undefined;
export declare const getStaticDir: (conf: any) => string | undefined;
export declare function toString(str: any): string;
export declare const getReqId: () => string;
export declare function onSocketEnd(socket: any, callback: ((err?: Error) => void) | null): void;
export declare const getEmptyRes: () => PassThrough;
export declare function parseDeleteProperties(req: any): {
    reqHeaders: Record<string, number>;
    resHeaders: Record<string, number>;
    trailers: Record<string, number>;
};
export declare const deleteReqHeaders: (req: any) => void;
export declare const setReqCors: (data: any, cors: any) => void;
export declare const setResCors: (data: any, cors: any, req: any) => void;
export declare const disableReqProps: (req: any) => void;
export declare const disableResProps: (req: any, headers: any) => void;
export declare const setReqCookies: (data: any, cookies: Record<string, any>, curCookies: any) => void;
export declare const setResCookies: (data: {
    headers: Record<string, string | undefined>;
}, cookies?: Record<string, any>) => void;
export declare const escapeRegExp: (str?: string) => string;
export declare const checkTlsError: (err: any) => boolean;
export declare const checkAuto2Http: (req: any, ip: any, proxyUrl: any) => any;
export declare const setProxyHost: (req: any, options: any, reserve?: boolean) => any;
export declare const getHostIp: (ip: any, port: any) => any;
export declare function getMethod(method: any): string;
export declare function isRulesContent(ctn: string): boolean;
export declare const setResponseFor: (rules: any, headers: any, req: any, serverIp: any) => void;
export declare const getNoPluginServerMsg: (rule: any) => string;
export declare const getRemoteRules: (apo: any, rulesUrl: any) => any;
export declare function isCustomParser(req: any): any;
export declare const getParserStatus: (req: any) => string | undefined;
export declare const isInspect: (enable: any) => any;
export declare const parseRange: (req: any, size: any) => {
    start: any;
    end: number;
} | undefined;
export declare const parseClientInfo: (req: any) => any;
export declare function getCipher(rules: any): any;
export declare const connect: (options: ConnectOptions, callback: any) => void;
export declare const checkPluginReqOnce: (req: any, raw?: boolean) => any;
export declare const showPluginReq: (req: any) => boolean | undefined;
export declare const checkPort: (port: any, host: string | (() => void), cb?: () => void) => void;
export declare const getBoundIp: (host: any, cb: any) => any;
export declare const getPluginMenuConfig: (conf: any) => string;
export declare const getPluginInspectorConfig: (conf: any) => string;
export declare const isEnableH2: (req: any) => any;
export declare const isDisableH2: (req: any, strict: any) => any;
export declare const formatH2Headers: (headers: any) => Record<string, any>;
export declare const renderPluginRules: (rules: any, pkg: any, simpleName: any) => any;
export declare const setClientCert: (options: any, key: any, cert: any, isPfx: any, cacheKey?: string) => void;
export declare const getStatusCodeFromRule: (rules: any) => {
    statusCode: any;
    headers: {
        location: undefined;
    };
} | undefined;
export declare const canGzip: (req: any) => boolean;
export declare const removeReqBody: (req: any, data: any) => void;
export declare const removeResBody: (req: any, data: any) => void;
export declare function readOneChunk(stream: any, callback: any, timeout?: number): any;
export declare const getAuthByRules: (rules: any) => {
    username: any;
    password: any;
} | undefined;
export declare const getAuthBasic: (auth: any) => string | undefined;
export declare const delay: (time: any, callback: any) => void;
export declare const handleForwardedProps: (req: any) => void;
export declare const filterWeakRule: (req: any) => void;
export declare const setPluginMgr: (p: any) => void;
export declare function setTunnelHeaders(headers: any, remoteData: any): void;
export declare const addTunnelData: (socket: any, headers: any) => void;
export declare const isInternalProxy: (req: any) => any;
export declare const checkProxyHost: (proxy: any, host: any) => boolean | undefined;
