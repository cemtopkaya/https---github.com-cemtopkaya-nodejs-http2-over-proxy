import { describe, expect, test } from 'vitest';
import { request } from '../../../__tests__/utils';
describe('filter', () => {
    test('ok', async () => {
        const r1 = await request('http://filter.com/index.html');
        expect(r1.data).toHaveProperty('ec', 0);
        const r2 = await request('http://filter2.com/test.html?abc');
        expect(r2.data).toHaveProperty('ec', 123);
        const r3 = await request('http://filter2.com/test.html?cba');
        expect(r3.data).toHaveProperty('ec', 333);
        const r4 = await request('http://filter2.com/test.html?cb2a');
        expect(r4.data).toHaveProperty('ec', 321);
        const r5 = await request({
            url: 'https://filter.com/index.html',
            method: 'delete',
            body: '1'.repeat(1024 * 250) + 'test'
        });
        expect(r5.data).toHaveProperty('ec', 1);
        const r6 = await request({
            url: 'https://filter.com/index.html',
            method: 'delete',
            body: 'test',
            headers: {
                test: 'abc'
            }
        });
        expect(r6.data).toHaveProperty('ec', 1);
        const r7 = await request({
            url: 'https://filter.com/index.html',
            method: 'post',
            body: '555555',
            headers: {
                test: 'abc',
                'x-test': 'abc'
            }
        });
        expect(r7.data).toHaveProperty('ec', 2);
        const r8 = await request({
            url: 'https://filter.com/index.html',
            method: 'post',
            headers: {
                test: 'abc',
                'x-test': 'hehe'
            }
        });
        expect(r8.data).toHaveProperty('ec', 3);
        const r9 = await request({
            url: 'https://filter.com/index.html',
            method: 'post',
            headers: {
                test: 'abc',
                'x-test': '123'
            }
        });
        expect(r9.data).toHaveProperty('ec', 4);
    });
});
