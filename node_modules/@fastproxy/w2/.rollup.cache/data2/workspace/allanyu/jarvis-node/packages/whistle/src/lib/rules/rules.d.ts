type JSObject = Record<string, any>;
export default class Rules {
    static disableDnsCache: () => void;
    _rules: JSObject;
    _globalPluginVars: JSObject;
    _sniCallback: any[];
    private _orgValues;
    private _values;
    private _inlineValues;
    private disabled;
    private _rawText;
    constructor(values?: JSObject);
    parse: (text: any, root?: any, _inlineValues?: any) => void;
    clearAppend: () => void;
    append: (text: any, root: any) => void;
    resolveHost: (req: any, callback: any, pluginRulesMgr?: any, rulesFileMgr?: any, headerRulesMgr?: any) => any;
    lookupHost: (req: any, callback: any) => void;
    getHost: (req: any, pluginRulesMgr: any, rulesFileMgr: any, headerRulesMgr: any) => any;
    resolveFilter: (req: any) => any;
    resolveDisable: (req: any) => any;
    resolveRules: (req: any) => JSObject;
    resolveReqRules: (req: any) => JSObject;
    resolveResRules: (req: any) => JSObject;
    resolveEnable: (req: any) => any;
    resolveProxyProps: (req: any) => {
        enable: any;
        disable: any;
    } | undefined;
    resolvePipe: (req: any) => any;
    resolvePac: (req: any) => any;
    resolveRule: (req: any) => any;
    resolveInternalHost: (req: any) => string | undefined;
    hasReqScript: (req: any) => any;
    resolveProxy: (req: any, host: any) => any;
    resolveSNICallback: (req: any) => any;
    resolveLocalRule: (req: any) => any;
    resolveClientCert: (req: any) => any;
    resolveBodyFilter: (req: any) => any;
}
export {};
