export declare function parseRules(): void;
declare function getDefaultRules(): any;
declare function disableDefaultRules(): void;
declare function enableDefaultRules(): void;
declare function defaultRulesIsDisabled(): any;
declare function selectRulesFile(file: any): any;
declare function unselectRulesFile(file: any, force?: boolean): any;
declare function clearSelection(): void;
declare function getSelectedRulesList(): any;
declare function getAllRulesFile(): any;
declare function moveRulesTo(fromName: any, toName: any, clientId: any): boolean;
export declare const rules: {
    getRecycleBin: () => import("./recycle-bin").default;
    enableBackRulesFirst: (backRulesFirst: any) => void;
    moveTo: typeof moveRulesTo;
    moveToTop: (name: any, clientId?: any) => void;
    get: (file: any) => any;
    remove: (file: any, clientId: any) => void;
    add: (file: any, data: any, clientId?: any) => void;
    rename: (file: any, newFile: any, clientId: any) => void;
    select: typeof selectRulesFile;
    unselect: typeof unselectRulesFile;
    list: typeof getAllRulesFile;
    getDefault: typeof getDefaultRules;
    setDefault: (value: any, clientId: any) => void;
    enableDefault: typeof enableDefaultRules;
    disableDefault: typeof disableDefaultRules;
    defaultRulesIsDisabled: typeof defaultRulesIsDisabled;
    parseRules: typeof parseRules;
    clearSelection: typeof clearSelection;
    getSelectedList: typeof getSelectedRulesList;
    /**
     * whistle没有实现该方法
     * @deprecated
     */
    setSysHosts: (hosts: any, callback: (err?: Error) => void) => void;
};
export declare const values: {
    getRecycleBin: () => import("./recycle-bin").default;
    getUploadFiles: () => any[];
    download: (name: any, res: any) => any;
    existsFile: (name: any) => any;
    LIMIMT_FILES_COUNT: number;
    addUploadFile: (options: any, callback: any) => any;
    removeUploadFile: (name: any, callback: any) => any;
    moveTo: (fromName: any, toName: any, clientId: any) => boolean;
    add: (file: any, data: any, clientId: any) => void;
    get: (file: any) => any;
    remove: (file: any, clientId: any) => void;
    rename: (file: any, newFile: any, clientId: any) => void;
    list: () => any;
    select: (file: any) => void;
    unselect: () => void;
};
export declare const properties: {
    getLatestVersion: () => string;
    isEnableCapture: () => boolean;
    setEnableCapture: (enable: any) => void;
    isEnableHttp2: () => boolean;
    setEnableHttp2: (enable: any) => void;
    set: (name: any, value: any) => void;
    remove: (name: any) => void;
    get: (name: any) => any;
    getHistory: () => any[];
    addHistory: (data: any) => void;
};
export declare const addRules: (rules: any, replace: any, clientId?: any) => void;
export declare const addValues: (values: any, replace: any, clientId?: any) => void;
export declare const setup: (p: any) => void;
export {};
