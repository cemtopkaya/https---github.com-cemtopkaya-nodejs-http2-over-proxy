export interface SocketContext {
    customParser: any;
    req: any;
    res: any;
    hasEvent: boolean;
    url: string;
    charset: string;
    clearup: () => void;
    setSendStatus: (status: number) => void;
    setReceiveStatus: (status: number) => void;
    sendToServer?: (data?: any) => void;
    sendToClient?: (data?: any) => boolean | void;
    [key: string]: any;
}
export default function (p: any): void;
declare function getContext(req: any, res: any, hasEvent: any, sendStatus: any, receiveStatus: any): SocketContext;
export declare const setContext: typeof getContext;
export declare const removeContext: (req: any) => void;
export declare const handleUpgrade: (req: any, res: any) => any;
export declare const handleConnect: (req: any, res: any) => any;
export declare const abort: (reqId: any) => void;
export declare const getStatus: (reqId: any) => {
    sendStatus: any;
    receiveStatus: any;
} | undefined;
export declare const removePending: (req: any) => void;
export declare const setPending: (req: any) => void;
export declare const exists: (reqId: any) => any;
export declare const getData: (reqId: any) => 1 | {
    sendStatus: any;
    receiveStatus: any;
    toServer: any;
    toClient: any;
} | undefined;
export declare const changeStatus: (data: any) => true | undefined;
export declare const sendData: (data: any) => any;
export {};
