import { describe, expect, test } from 'vitest';
import { request } from '../../../__tests__/utils';
describe('rule', () => {
    test('ok', async () => {
        const body = 'test__';
        const r1 = await request({
            url: 'http://test.whistlejs.com/',
            body: body,
            method: 'post'
        });
        expect(r1.data.body).toBe(body);
        const r2 = await request({
            url: 'http://rule4.test.whistlejs.com/abc?abc=1',
            body: body,
            method: 'post'
        });
        expect(r2.data.body).toBe(body);
        const r3 = await request('http://rule.test.whistlejs.com/');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('host.test.whistlejs.com');
        const r4 = await request('http://rule1.test.whistlejs.com/?abc=123#cdb');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('host.test.whistlejs.com');
        //expect(r1.data.url.endsWith('/?test1abc=123')).toBeTrusely();
        const r5 = await request('http://rule2.test.whistlejs.com/?abc=1');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('host.test.whistlejs.com');
        // data.url.should.endsWith('/?test2');
        const r6 = await request('http://rule2.test.whistlejs.com/?abc=');
        expect(r6.data).not.toHaveProperty('type');
        expect(r6.data.headers.host).toBe('rule2.test.whistlejs.com');
        const r7 = await request('http://rule3.test.whistlejs.com/abcd');
        expect(r7.data).not.toHaveProperty('type');
        expect(r7.data.headers.host).not.toBe('host.test.whistlejs.com');
        const r8 = await request('http://rule3.test.whistlejs.com/abc');
        //expect(r8.data.type).toBe('server');
        //expect(r8.data.headers.host).toBe('host.test.whistlejs.com');
        // expect(data.url).should.endWith('/?test2');
        const r9 = await request('http://rule4.test.whistlejs.com/abc');
        // expect(// data).not.toHaveProperty('type');
        // data.headers.host.should.not.equal('host.test.whistlejs.com');
        const r10 = await request('http://rule4.test.whistlejs.com/abc?abc=1');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('host.test.whistlejs.com');
        // data.url.should.endWith('/?test2');
        const r11 = await request('http://testrule5.test.whistlejs.com/abc?abc=1#aaaa');
        // expect(// data).not.toHaveProperty('type');
        // data.headers.host.should.not.equal('host.test.whistlejs.com');
        const test = '9999999999';
        const r12 = await request('http://testrule5.test.whistlejs.com/abc?test=' + test + '#aaaa');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('host.test.whistlejs.com');
        expect(r12.data.url.endsWith('/abc?test=' + test + '')).toBeTruthy();
        const r13 = await request('http://testrule5.abc.test.whistlejs.com/?test=' + test + '#aaaa');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('host.abc.test.whistlejs.com');
        expect(r13.data.url.endsWith('/?test=' + test + '')).toBeTruthy();
        const r14 = await request('http://testrule6.tt.abc.test.whistlejs.com/?test=' + test + '#aaaa');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('tt.abc.test.whistlejs.com');
        expect(r14.data.url.endsWith('/?test=' + test + '')).toBeTruthy();
        const r15 = await request('http://testrule6.abc.test.whistlejs.com/?test=' + test + '#aaaa');
        //expect(r1.data.type).toBe('server');
        //expect(r1.data.headers.host).toBe('abc.test.whistlejs.com');
        expect(r15.data.url.endsWith('/?test=' + test + '')).toBeTruthy();
    });
});
