/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { SocketServer } from 'sockx';
import type { Request, RequestHandler, Response } from 'express';
import type { EventEmitter, HttpServer, HttpsServer } from './import-pkg';
import { HttpAgent, HttpsAgent, http, url } from './import-pkg';
import * as common from './util/common';
export interface ProxyEventEmitter extends EventEmitter {
    config: Config;
    server: HttpServer;
    httpsServer: HttpsServer;
    httpServer: HttpServer;
    socksServer: SocketServer;
}
type JSObject = Record<string, any>;
type InitHookFn = (config: Config) => void;
interface AgentConfig {
    maxSockets: number;
    keepAlive: boolean;
    keepAliveMsecs: number;
    maxFreeSockets: number;
}
export interface NewConfig extends Omit<Partial<Config>, 'timeout' | 'middlewares' | 'secureFilter' | 'cluster' | 'storage'> {
    server?: never;
    guestPassword?: string;
    guestName?: string;
    pluginHost?: string;
    addonPath?: string | string[];
    addonsPath?: string | string[];
    replaceValues?: boolean;
    replaceRules?: boolean;
    uiMiddlewares?: any[];
    inspect?: boolean;
    inspectBrk?: boolean;
    extra?: string;
    host?: string;
    timeout?: string | number;
    middlewares?: string;
    middleware?: string;
    secureFilter?: string | Config['secureFilter'];
    notUninstallPluginPath?: string | string[];
    pluginsPath?: string | string[];
    pluginPath?: NewConfig['pluginsPath'];
    projectPluginsPath?: string | string[];
    projectPluginPath?: NewConfig['projectPluginsPath'];
    customPluginPath?: string[];
    customPluginsPath?: string[];
    copy?: string | boolean;
    cluster?: string | number;
    /** 提供的配置文件路径 */
    config?: string;
    storage?: string | false;
    customHandle?: (...args: any[]) => any;
}
export type ConfigMode = '' | 'pureProxy' | 'debug' | 'master' | 'disableAuthUI' | 'captureData' | 'headless' | 'strict' | 'proxyServer' | 'encrypted' | 'noGzip' | 'disableUpdateTips' | 'proxifier2' | 'showPluginReq' | 'disableCustomCerts' | 'nohost' | 'multienv' | 'multiEnv' | 'proxyOnly' | 'useMultipleRules' | 'enableMultipleRules' | 'disableMultipleRules' | 'notAllowDisableRules' | 'notAllowedDisableRules' | 'disableBackOption' | 'disabledBackOption' | 'disableMultipleOption' | 'disabledMultipleOption' | 'disableRulesOptions' | 'disabledRulesOptions' | 'notAllowDisablePlugins' | 'notAllowedDisablePlugins' | 'socks' | 'network' | 'shadowRules' | 'shadowRulesOnly' | 'plugins' | 'pluginsOnly' | 'rules' | 'rulesOnly' | 'httpProxy' | 'keepXFF' | 'x-forwarded-for' | 'forwardedFor' | 'x-forwarded-host' | 'x-forwarded-proto' | 'INADDR_ANY' | 'buildIn' | 'build-in' | 'safe' | 'rejectUnauthorized' | 'capture' | 'intercept' | 'enable-capture' | 'enableCapture' | 'http2' | 'enable-http2' | 'enableHttp2' | 'enable-h2' | 'enableH2' | 'disable-http2' | 'disableHttp2' | 'disable-h2' | 'disableH2' | 'hideLeftBar' | 'hideLeftMenu' | string;
export declare class Config {
    version: any;
    name: any;
    dataDirname: any;
    localUIHost: any;
    sockets: number;
    timeout: any;
    registry: any;
    port: any;
    host?: string;
    uid: string;
    rejectUnauthorized: boolean;
    enableH2: boolean;
    ASSESTS_PATH: string;
    REQ_FROM_HEADER: string;
    WHISTLE_POLICY_HEADER: string;
    CUSTOM_CERT_HEADER: string;
    ENABLE_CAPTURE_HEADER: string;
    CLIENT_IP_HEAD: string;
    HTTPS_FIELD: string;
    HTTPS_PROTO_HEADER: string;
    REAL_HOST_HEADER: string;
    FWD_HOST_HEADER: string;
    INTERNAL_ID: string;
    INTERNAL_ID_HEADER: string;
    SNI_PLUGIN_HEADER: string;
    PROXY_ID_HEADER: string;
    CLIENT_PORT_HEAD: string;
    WEBUI_HEAD: string;
    RES_RULES_HEAD: string;
    CLIENT_INFO_HEAD: string;
    REMOTE_ADDR_HEAD: string;
    REMOTE_PORT_HEAD: string;
    WEBUI_PATH: string;
    PREVIEW_PATH_RE: RegExp;
    PLUGIN_HOOK_NAME_HEADER: "x-whistle-plugin-hook-name_";
    CLIENT_ID_HEADER: string;
    COMPOSER_CLIENT_ID_HEADER: string;
    TUNNEL_DATA_HEADER: string;
    TEMP_TUNNEL_DATA_HEADER: string;
    SNI_TYPE_HEADER: string;
    ALPN_PROTOCOL_HEADER: string;
    PLUGIN_HOOKS: {
        SNI: string;
        AUTH: string;
        HTTP: string;
        UI: string;
        TUNNEL: string;
        TUNNEL_RULES: string;
        REQ_STATS: string;
        RES_STATS: string;
        REQ_RULES: string;
        RES_RULES: string;
        REQ_READ: string;
        REQ_WRITE: string;
        RES_READ: string;
        RES_WRITE: string;
        WS_REQ_READ: string;
        WS_REQ_WRITE: string;
        WS_RES_READ: string;
        WS_RES_WRITE: string;
        TUNNEL_REQ_READ: string;
        TUNNEL_REQ_WRITE: string;
        TUNNEL_RES_READ: string;
        TUNNEL_RES_WRITE: string;
    };
    CONN_TIMEOUT: number;
    getHomedir: typeof common.getHomedir;
    getHomePath: typeof common.getHomePath;
    getWhistlePath: typeof common.getWhistlePath;
    CUSTOM_PLUGIN_PATH: string;
    CUSTOM_CERTS_DIR: string;
    pluginHostMap: JSObject;
    uiport?: number | string;
    uihost?: string;
    uiMiddleware?: RequestHandler[];
    cmdName?: string;
    account?: string;
    allowPluginList: string[];
    blockPluginList: string[];
    webUIPath?: string;
    cluster?: boolean;
    mode?: string;
    inspectMode?: boolean;
    dnsOverHttps?: string;
    dnsServer?: string;
    resolve6?: boolean;
    dnsOptional?: boolean;
    rules?: JSObject;
    shadowRules?: string;
    shadowValues?: JSObject;
    values?: JSObject;
    pluginsDataMap?: JSObject;
    customHandler?: (req: Request, res: Response) => void;
    realPort?: number | string;
    realHost?: string;
    socksHost?: string;
    socksPort?: number;
    httpPort?: string | number;
    httpHost?: string;
    httpsPort?: string | number;
    httpsHost?: string;
    defaultHost?: string;
    authKey?: string;
    guestAuthKey?: string;
    reqCacheSize: number;
    allowMultipleChoice?: boolean;
    frameCacheSize: number;
    encrypted?: boolean;
    storage?: string;
    globalData: any;
    extra: any;
    dnsCache: any;
    allowDisableShadowRules?: boolean;
    debugMode?: boolean;
    showPluginReq?: boolean;
    disableCustomCerts?: boolean;
    multienv?: boolean;
    multiEnv?: boolean;
    pureProxy?: boolean;
    debug: boolean;
    master?: boolean;
    disableAuthUI?: boolean;
    captureData?: boolean;
    headless?: boolean;
    strict?: boolean;
    proxyServer?: boolean;
    noGzip?: boolean;
    disableUpdateTips?: boolean;
    proxifier?: boolean;
    proxifier2?: boolean;
    nohost?: boolean;
    notAllowedDisableRules?: boolean;
    disabledBackOption?: boolean;
    disabledMultipleOption?: boolean;
    disabledRulesOptions?: boolean;
    notAllowedDisablePlugins?: boolean;
    socksMode?: boolean;
    shadowRulesMode?: boolean;
    networkMode?: boolean;
    disableWebUI?: boolean;
    pluginsOnlyMode?: boolean;
    pluginsMode?: boolean;
    rulesMode?: boolean;
    rulesOnlyMode?: boolean;
    keepXFF?: boolean;
    enableFwdHost?: boolean;
    enableFwdProto?: boolean;
    INADDR_ANY?: boolean;
    isEnableCapture?: boolean;
    isEnableHttp2?: boolean;
    hideLeftMenu?: boolean;
    overCipKey?: boolean;
    cipKey?: string;
    overCidKey?: boolean;
    cidKey?: string;
    overTdKey?: boolean;
    tdKey?: string;
    noGlobalPlugins?: boolean;
    disableAllRules?: boolean;
    disableAllPlugins?: boolean;
    replaceExistRule?: boolean;
    replaceExistValue?: boolean;
    certDir?: string;
    middlewares: string[];
    secureFilter?: (...args: any[]) => any;
    notUninstallPluginPaths?: string[];
    pluginPaths: string[];
    prePluginsPath: string[];
    projectPluginPaths: string[];
    accountPluginsPath: string[];
    customPluginPaths: string[];
    addon: string[];
    customUIPort?: boolean;
    uiHostList: string[];
    customLocalUIHost?: string;
    httpAgent?: HttpAgent | false;
    httpsAgent?: HttpsAgent | false;
    agentConfig: AgentConfig;
    baseDirHash?: string;
    password?: string;
    passwordHash?: string;
    rulesDir: string;
    valuesDir: string;
    propertiesDir: string;
    clientId: string;
    LOCAL_FILES: string;
    mrulesClientId?: string;
    mrulesTime?: number;
    mvaluesClientId?: string;
    mvaluesTime?: number;
    guest: {
        username?: string;
        password?: string;
    };
    workerIndex: string | undefined;
    username?: string;
    runtimeId?: string;
    runtimeHeaders?: {
        'x-whistle-runtime-id': string;
    };
    pluginHeaders?: {
        'x-whistle-runtime-id': string;
        'x-whistle-internal-id': string;
        'x-whistle-plugin-hook-name_': string;
    };
    private inited;
    private initedHooks;
    constructor();
    getDataDir: (dirname?: string) => string;
    baseDir: string;
    getHttpsAgent: (options: any, reqOpts: any) => any;
    setLocalUIHost: (hostname: string) => void;
    isWebUIHost: (host: string) => boolean;
    isLocalUIUrl: (url: string) => boolean;
    getPluginNameByHost: (host: string) => any;
    extend: (newConf?: NewConfig) => this;
    /** 添加配置初始化后的处理钩子 */
    addInitHook: (hook: InitHookFn) => void;
    getSocksAgent: (options: any) => any;
    setModified: (clientId: string, isRules?: boolean) => void;
    getAuths: (_url: string | url.UrlWithStringQuery) => any[];
    setAuth: (auth: any) => this;
    getPluginData: (name: string) => any;
    setGuestAuth: (auth?: NewConfig) => void;
    setUIHost: (host: string[] | string) => void;
    setPluginUIHost: (pluginName: any, host: any) => void;
    toBuffer: (buf: Buffer | string) => Buffer;
    setHeader: (headers: any, name: any, value: any) => void;
    connect: (options: any, cb: any) => http.ClientRequest;
    private getPaths;
}
declare const _default: Config;
export default _default;
