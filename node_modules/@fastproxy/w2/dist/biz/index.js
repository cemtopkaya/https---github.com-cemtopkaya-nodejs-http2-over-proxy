"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bizMiddleware = void 0;
const tslib_1 = require("tslib");
const import_pkg_1 = require("../lib/import-pkg");
const rules = tslib_1.__importStar(require("../lib/rules"));
const util = tslib_1.__importStar(require("../lib/util"));
const config_1 = tslib_1.__importDefault(require("../lib/config"));
const lib_1 = require("./webui/lib");
const weinre_1 = tslib_1.__importDefault(require("./weinre"));
const localIpCache = util.localIpCache;
const WEBUI_PATH = config_1.default.WEBUI_PATH;
const CUSTOM_WEBUI_PATH = /\/[\w.-]*\.whistle-path\.5b6af7b9884e1165[\w.-]*\/+/;
const CUSTOM_WEBUI_PATH_RE = /^\/[\w.-]*\.whistle-path\.5b6af7b9884e1165[\w.-]*\/+/;
const PREVIEW_PATH_RE = config_1.default.PREVIEW_PATH_RE;
const WEBUI_PATH_RE = util.escapeRegExp(WEBUI_PATH);
const REAL_WEBUI_HOST = new RegExp('^' + WEBUI_PATH_RE + '(__([a-z\\d.-]+)(?:__(\\d{1,5}))?__/)');
const INTERNAL_APP = new RegExp('^' + WEBUI_PATH_RE + '(log|weinre|cgi)(?:\\.(\\d{1,5}))?/');
const PLUGIN_RE = new RegExp('^' + WEBUI_PATH_RE + 'whistle\\.([a-z\\d_-]+)/');
const CUSTOM_REAL_WEBUI_HOST = new RegExp('^/[\\w.-]*\\.whistle-path\\.5b6af7b9884e1165[\\w.-]*/+(__([a-z\\d.-]+)(?:__(\\d{1,5}))?__/)');
const CUSTOM_INTERNAL_APP = new RegExp('^/[\\w.-]*\\.whistle-path\\.5b6af7b9884e1165[\\w.-]*/+(log|weinre|cgi)(?:\\.(\\d{1,5}))?/');
const CUSTOM_PLUGIN_RE = new RegExp('^/[\\w.-]*\\.whistle-path\\.5b6af7b9884e1165[\\w.-]*/+whistle\\.([a-z\\d_-]+)/');
const REAL_WEBUI_HOST_PARAM = /_whistleInternalHost_=(__([a-z\d.-]+)(?:__(\d{1,5}))?__)/;
const OUTER_PLUGIN_RE = /^(?:\/whistle)?\/((?:whistle|plugin)\.[a-z\\d_-]+)::(\d{1,5})\//;
const bizMiddleware = function (req, res, next) {
    const config = this.config;
    const pluginMgr = this.pluginMgr;
    let fullUrl = (req.fullUrl = util.getFullUrl(req)); // format request
    let host = util.parseHost(req.headers.host);
    const port = host[1] || (req.isHttps ? 443 : 80);
    let bypass;
    host = host[0];
    let transformPort, isProxyReq, isWeinre, isOthers;
    let webUI = WEBUI_PATH;
    let realHostRe = REAL_WEBUI_HOST;
    let internalAppRe = INTERNAL_APP;
    let pluginRe = PLUGIN_RE;
    let isWebUI = req.path.indexOf(WEBUI_PATH) === 0;
    let isOld;
    if (!isWebUI && CUSTOM_WEBUI_PATH_RE.test(req.path)) {
        isWebUI = true;
        isOld = true;
        webUI = CUSTOM_WEBUI_PATH;
        realHostRe = CUSTOM_REAL_WEBUI_HOST;
        internalAppRe = CUSTOM_INTERNAL_APP;
        pluginRe = CUSTOM_PLUGIN_RE;
    }
    if (isWebUI) {
        isWebUI = !config.pureProxy;
        let realHost;
        if (isWebUI) {
            if (realHostRe.test(req.path) || REAL_WEBUI_HOST_PARAM.test(req.url)) {
                const realPath = RegExp.$1;
                const realPort = RegExp.$3;
                realHost = RegExp.$2 + (realPort ? ':' + realPort : '');
                req.headers[config.REAL_HOST_HEADER] = realHost;
                req.url = req.url.replace(realPath, '');
            }
            else {
                req.curUrl = fullUrl;
                if ((realHost = rules.resolveInternalHost(req))) {
                    req.headers[config.REAL_HOST_HEADER] = realHost;
                }
            }
            if (internalAppRe.test(req.path)) {
                transformPort = RegExp.$2;
                isWeinre = RegExp.$1 === 'weinre';
                if (transformPort) {
                    isOthers = isProxyReq = transformPort != config.port;
                }
                else {
                    isProxyReq = false;
                    transformPort = config.port;
                }
                isProxyReq = isProxyReq || isOld;
            }
            else if (pluginRe.test(req.path)) {
                isProxyReq = !pluginMgr.getPlugin(RegExp.$1 + ':');
            }
            else if (!req.headers[config.WEBUI_HEAD]) {
                isWebUI = false;
            }
            if (!config.proxyServer && isProxyReq && !config.isLocalUIUrl(host)) {
                isWebUI = false;
                req.isPluginReq = true;
                req._isProxyReq = true;
            }
        }
    }
    else {
        isWebUI = req.headers[config.WEBUI_HEAD];
        if (!isWebUI) {
            if (!(isWebUI = localIpCache.get(host))) {
                isWebUI = config.isLocalUIUrl(host);
                if (isWebUI ? import_pkg_1.net.isIP(host) : util.isLocalHost(host)) {
                    isWebUI = util.isProxyPort(port);
                }
            }
        }
        else if (util.isProxyPort(port) && import_pkg_1.net.isIP(host)) {
            localIpCache.set(host, true);
        }
        if (isWebUI) {
            if (req.path.indexOf('/_/') === 0) {
                bypass = '/_/';
            }
            else if (req.path.indexOf('/-/') === 0) {
                bypass = '/-/';
            }
            if (bypass) {
                req.url = req.url.replace(bypass, '/');
            }
            delete req.headers[config.INTERNAL_ID_HEADER];
        }
        else if (PREVIEW_PATH_RE.test(req.url)) {
            req.headers[config.INTERNAL_ID_HEADER] = config.INTERNAL_ID;
            req.url = '/preview.html?charset=' + RegExp.$1;
            isWebUI = true;
        }
    }
    // 后续有用到
    fullUrl = req.fullUrl = util.getFullUrl(req);
    if (bypass) {
        return next();
    }
    let localRule;
    req.curUrl = fullUrl;
    if (isWebUI) {
        if (isOthers) {
            util.transformReq(req, res, transformPort);
        }
        else {
            req.url = req.url.replace(transformPort ? internalAppRe : webUI, '/');
            if (OUTER_PLUGIN_RE.test(req.path)) {
                const outerPort = parseInt(RegExp.$2, 10);
                req.url = req.url.replace(RegExp['$&'], '/' + RegExp.$1 + '/');
                if (outerPort > 0 && outerPort < 65536 && outerPort != config.port) {
                    req.headers.host = '127.0.0.1:' + outerPort;
                    return util.transformReq(req, res, outerPort);
                }
            }
            req._hasRespond = true;
            if (isWeinre) {
                (0, weinre_1.default)(req, res);
            }
            else {
                (0, lib_1.handleRequest)(req, res);
            }
        }
    }
    else if ((localRule = rules.resolveLocalRule(req))) {
        req.url = localRule.url;
        if (localRule.realPort) {
            req.headers.host = '127.0.0.1:' + localRule.realPort;
            util.transformReq(req, res, localRule.realPort);
        }
        else {
            (0, lib_1.handleRequest)(req, res);
        }
    }
    else {
        next();
    }
};
exports.bizMiddleware = bizMiddleware;
