"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = tslib_1.__importDefault(require("../../../lib/config"));
const rulesUtil = tslib_1.__importStar(require("../../../lib/rules/util"));
const ca = tslib_1.__importStar(require("../../../lib/https/ca"));
const lib_1 = require("../../../biz/webui/lib");
const util = tslib_1.__importStar(require("./util"));
const values_1 = tslib_1.__importDefault(require("./values"));
const rules_1 = tslib_1.__importDefault(require("./rules"));
const properties = rulesUtil.properties;
const getUploadFiles = rulesUtil.values.getUploadFiles;
function default_1(req, res) {
    const logger = (0, lib_1.getProxy)().logger;
    const pluginMgr = (0, lib_1.getProxy)().pluginMgr;
    const lastLog = (0, lib_1.getProxy)().getLogs(0, 1)[0];
    const lastSvrLog = logger.getLogs(0, 1)[0];
    util.sendGzip(req, res, {
        version: config_1.default.version,
        custom1: properties.get('Custom1'),
        custom2: properties.get('Custom2'),
        hasInvalidCerts: ca.hasInvalidCerts,
        supportH2: config_1.default.enableH2,
        lastLogId: lastLog && lastLog.id,
        lastSvrLogId: lastSvrLog && lastSvrLog.id,
        lastDataId: (0, lib_1.getProxy)().getLastDataId(),
        clientId: util.getClientId(),
        clientIp: util.getClientIp(req),
        mrulesClientId: config_1.default.mrulesClientId,
        mrulesTime: config_1.default.mrulesTime,
        mvaluesClientId: config_1.default.mvaluesClientId,
        mvaluesTime: config_1.default.mvaluesTime,
        latestVersion: properties.getLatestVersion(),
        server: util.getServerInfo(req),
        uploadFiles: getUploadFiles(),
        rules: (0, rules_1.default)(),
        values: (0, values_1.default)(),
        interceptHttpsConnects: properties.isEnableCapture(),
        enableHttp2: properties.isEnableHttp2(),
        plugins: pluginMgr.getPlugins(),
        disabledPlugins: (!config_1.default.notAllowedDisablePlugins && properties.get('disabledPlugins')) || {},
        disabledAllPlugins: !config_1.default.notAllowedDisablePlugins && properties.get('disabledAllPlugins'),
        disabledAllRules: !config_1.default.notAllowedDisableRules && properties.get('disabledAllRules'),
        localUIHost: config_1.default.localUIHost
    });
}
exports.default = default_1;
