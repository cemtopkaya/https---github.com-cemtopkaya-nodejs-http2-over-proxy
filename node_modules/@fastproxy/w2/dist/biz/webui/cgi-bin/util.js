"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendGzip = exports.getClientIp = exports.formatDate = exports.getReqData = exports.getServerInfo = exports.getClientId = void 0;
const tslib_1 = require("tslib");
const zlib_1 = require("zlib");
const util = tslib_1.__importStar(require("../../../lib/util"));
const config_1 = tslib_1.__importDefault(require("../../../lib/config"));
const process_1 = tslib_1.__importDefault(require("../../../lib/util/process"));
const util_1 = require("../../../lib/rules/util");
const PID = process.pid;
const MAX_OBJECT_SIZE = 1024 * 1024 * 6;
let index = 0;
const dnsOverHttps = config_1.default.dnsOverHttps;
const doh = !!dnsOverHttps;
const getClientId = function () {
    if (index > 9999) {
        index = 0;
    }
    return Date.now() + '-' + index++;
};
exports.getClientId = getClientId;
const getServerInfo = function (req) {
    let baseDir;
    if (!config_1.default.networkMode && !config_1.default.pluginsMode) {
        baseDir = config_1.default.baseDirHash;
    }
    const info = {
        pid: PID,
        pInfo: process_1.default,
        dcc: config_1.default.disableCustomCerts,
        dns: dnsOverHttps || config_1.default.dnsServer,
        doh: doh,
        bip: config_1.default.host,
        df: config_1.default.dnsOptional,
        r6: config_1.default.resolve6,
        version: config_1.default.version,
        cmdName: config_1.default.cmdName,
        hideLeftMenu: config_1.default.hideLeftMenu,
        networkMode: config_1.default.networkMode,
        rulesOnlyMode: config_1.default.rulesOnlyMode,
        pluginsMode: config_1.default.pluginsMode,
        ndr: config_1.default.notAllowedDisableRules,
        ndp: config_1.default.notAllowedDisablePlugins,
        drb: config_1.default.disabledBackOption,
        drm: config_1.default.disabledMultipleOption,
        rulesMode: config_1.default.rulesMode,
        strictMode: config_1.default.strict,
        multiEnv: config_1.default.multiEnv,
        baseDir: baseDir,
        username: config_1.default.username,
        nodeVersion: process.version,
        latestVersion: util_1.properties.getLatestVersion(),
        host: util.getHostname(),
        isWin: util.isWin,
        port: config_1.default.port,
        realPort: config_1.default.realPort,
        realHost: config_1.default.realHost,
        socksPort: config_1.default.socksPort,
        httpPort: config_1.default.httpPort,
        httpsPort: config_1.default.httpsPort,
        ipv4: [],
        ipv6: [],
        mac: req.ip + (config_1.default.storage ? '\n' + config_1.default.storage : '')
    };
    const ifaces = util.networkInterfaces();
    Object.keys(ifaces).forEach(function (ifname) {
        ifaces[ifname]?.forEach(function (iface) {
            if (iface.internal) {
                return;
            }
            info[iface.family == 'IPv4' || iface.family === 4 ? 'ipv4' : 'ipv6'].push(iface.address);
        });
    });
    return info;
};
exports.getServerInfo = getServerInfo;
const DATA_RE = /[\r\n]\s*(\{[\s\S]*\})[\r\n]/;
const REPLACE_RE = /[\r\n]1[\r\n]/;
const getReqData = function (req, callback) {
    let result = '';
    req.on('data', function (chunk) {
        result = result ? Buffer.concat([result, chunk]) : chunk;
        if (result.length > MAX_OBJECT_SIZE) {
            req.removeAllListeners('data');
            callback(new Error('The file size can not exceed 6m.'));
        }
    });
    req.on('error', callback);
    req.on('end', function () {
        result += '';
        let data;
        result = result.replace(DATA_RE, function (all, match) {
            data = match;
            return '';
        });
        if (!data) {
            return callback(new Error('The file content is not a JSON object'));
        }
        try {
            data = JSON.parse(data);
        }
        catch (err) {
            return callback(err);
        }
        callback(null, {
            data: data,
            replace: REPLACE_RE.test(result)
        });
    });
};
exports.getReqData = getReqData;
function padding(num) {
    return num < 10 ? '0' + num : num;
}
function paddingMS(ms) {
    if (ms > 99) {
        return ms;
    }
    if (ms > 9) {
        return '0' + ms;
    }
    return '00' + ms;
}
function formatDate() {
    const date = new Date();
    const result = [];
    result.push(date.getFullYear());
    result.push(padding(date.getMonth() + 1));
    result.push(padding(date.getDate()));
    result.push(padding(date.getHours()));
    result.push(padding(date.getMinutes()));
    result.push(padding(date.getSeconds()));
    result.push(paddingMS(date.getMilliseconds()));
    return result.join('');
}
exports.formatDate = formatDate;
exports.getClientIp = util.getClientIp;
const sendGzip = function (req, res, data) {
    if (!util.canGzip(req)) {
        return res.json(data);
    }
    (0, zlib_1.gzip)(JSON.stringify(data), function (err, result) {
        if (err) {
            try {
                res.json(data);
            }
            catch (e) {
                res
                    .status(500)
                    .send(config_1.default.debugMode ? '<pre>' + util.encodeHtml(util.getErrorStack(err)) + '</pre>' : 'Internal Server Error');
            }
            return;
        }
        res.writeHead(200, {
            'Content-Type': 'application/json; charset=utf-8',
            'Content-Encoding': 'gzip',
            'Content-Length': result.length
        });
        res.end(result);
    });
};
exports.sendGzip = sendGzip;
