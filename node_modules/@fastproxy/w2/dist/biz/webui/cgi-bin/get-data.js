"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lib_1 = require("../../../biz/webui/lib");
const config_1 = tslib_1.__importDefault(require("../../../lib/config"));
const rulesUtil = tslib_1.__importStar(require("../../../lib/rules/util"));
const ca = tslib_1.__importStar(require("../../../lib/https/ca"));
const util = tslib_1.__importStar(require("./util"));
const properties = rulesUtil.properties;
const rules = rulesUtil.rules;
function default_1(req, res) {
    const data = req.query;
    if (data.ids && typeof data.ids === 'string') {
        data.ids = data.ids.split(',');
    }
    else {
        data.ids = null;
    }
    const clientIp = util.getClientIp(req);
    const stopRecordConsole = data.startLogTime == -3;
    const stopRecordSvrLog = data.startSvrLogTime == -3;
    const h = req.headers;
    const proxy = (0, lib_1.getProxy)();
    util.sendGzip(req, res, {
        ec: 0,
        version: config_1.default.version,
        custom1: properties.get('Custom1'),
        custom2: properties.get('Custom2'),
        supportH2: config_1.default.enableH2,
        hasInvalidCerts: ca.hasInvalidCerts,
        clientIp: clientIp,
        mrulesClientId: config_1.default.mrulesClientId,
        mrulesTime: config_1.default.mrulesTime,
        mvaluesClientId: config_1.default.mvaluesClientId,
        mvaluesTime: config_1.default.mvaluesTime,
        server: util.getServerInfo(req),
        lastLogId: stopRecordConsole ? proxy.getLatestId() : undefined,
        lastSvrLogId: stopRecordSvrLog ? proxy.logger.getLatestId() : undefined,
        log: stopRecordConsole ? [] : proxy.getLogs(data.startLogTime, data.count, data.logId),
        svrLog: stopRecordSvrLog ? [] : proxy.logger.getLogs(data.startSvrLogTime, data.count),
        plugins: proxy.pluginMgr.getPlugins(),
        disabledPlugins: (!config_1.default.notAllowedDisablePlugins && properties.get('disabledPlugins')) || {},
        allowMultipleChoice: properties.get('allowMultipleChoice'),
        disabledAllPlugins: !config_1.default.notAllowedDisablePlugins && properties.get('disabledAllPlugins'),
        disabledAllRules: !config_1.default.notAllowedDisableRules && properties.get('disabledAllRules'),
        interceptHttpsConnects: properties.isEnableCapture(),
        enableHttp2: properties.isEnableHttp2(),
        defaultRulesIsDisabled: rules.defaultRulesIsDisabled(),
        list: rules.getSelectedList(),
        data: proxy.getData(data, clientIp, h['x-whistle-filter-key'], h['x-whistle-filter-value'], h['x-whistle-filter-client-id'], h[config_1.default.CLIENT_ID_HEADER])
    });
}
exports.default = default_1;
