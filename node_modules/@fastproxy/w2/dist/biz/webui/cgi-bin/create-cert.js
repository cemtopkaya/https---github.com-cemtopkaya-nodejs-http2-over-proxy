"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const querystring_1 = tslib_1.__importDefault(require("querystring"));
const node_native_zip2_1 = tslib_1.__importDefault(require("node-native-zip2"));
const safe_buffer_1 = require("safe-buffer");
const ca = tslib_1.__importStar(require("../../../lib/https/ca"));
const URL_RE = /^(?:([\w.-]+:)?\/\/)?([\w.=&!~*'()%-]+)/i;
const ILLEGAL_CHARS_RE = /[=&!~*'()%]/;
function parseDomain(domain) {
    domain = domain && typeof domain === 'string' && domain.trim();
    if (!domain || domain.length > 256 || !URL_RE.test(domain)) {
        return;
    }
    domain = RegExp.$2.toLowerCase();
    if (RegExp.$1 === 'root:') {
        return querystring_1.default.parse(domain);
    }
    return ILLEGAL_CHARS_RE.test(domain) ? null : domain;
}
function default_1(req, res) {
    let domain = parseDomain(req.query.domain);
    if (!domain) {
        return res.status(400).end('Bad Request');
    }
    const isStr = typeof domain === 'string';
    const cert = isStr ? ca.createCertificate(domain) : ca.createRootCA(domain);
    const zip = new node_native_zip2_1.default();
    domain = isStr ? domain : 'root';
    const dir = domain + '/' + domain;
    zip.add(dir + '.crt', safe_buffer_1.Buffer.from(cert.cert));
    zip.add(dir + '.key', safe_buffer_1.Buffer.from(cert.key));
    res.attachment(domain + '.zip').send(zip.toBuffer());
}
exports.default = default_1;
