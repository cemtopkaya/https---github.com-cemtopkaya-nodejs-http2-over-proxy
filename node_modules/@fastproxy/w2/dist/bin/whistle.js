#! /usr/bin/env node
"use strict";
/* eslint-disable node/shebang */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const starting_1 = tslib_1.__importDefault(require("@fastproxy/starting"));
const config_1 = tslib_1.__importDefault(require("../lib/config"));
const use_1 = require("./use");
const status_1 = require("./status");
const util_1 = require("./util");
const plugin = tslib_1.__importStar(require("./plugin"));
const debug = (0, debug_1.default)('@w2.bin.whistle');
function showStartupInfo(err, options, debugMode, restart) {
    if (!err || err === true) {
        return (0, util_1.showUsage)(err, options, restart);
    }
    if (/listen EADDRINUSE/.test(err)) {
        options = (0, util_1.formatOptions)(options);
        (0, util_1.error)('[!] Failed to bind proxy port ' +
            (options.host ? options.host + ':' : '') +
            (options.port || config_1.default.port) +
            ': The port is already in use');
        (0, util_1.info)('[i] Please check if ' +
            config_1.default.name +
            ' is already running, you can ' +
            (debugMode ? 'stop whistle with `w2 stop` first' : 'restart whistle with `w2 restart`'));
        (0, util_1.info)('    or if another application is using the port, you can change the port with ' +
            (debugMode ? '`w2 run -p newPort`\n' : '`w2 start -p newPort`\n'));
    }
    else if (err.code == 'EACCES' || err.code == 'EPERM') {
        (0, util_1.error)('[!] Cannot start ' + config_1.default.name + ' owned by root');
        (0, util_1.info)('[i] Try to run command with `sudo`\n');
    }
    (0, util_1.error)(err.stack ? 'Date: ' + new Date().toLocaleString() + '\n' + err.stack : err);
}
function getName() {
    if (/[/\\](\w+)$/.test(process.argv[1])) {
        return RegExp.$1;
    }
    return;
}
starting_1.default.setConfig({
    main: function (options) {
        debug('main:: invoke, options: ', options);
        const cmd = process.argv[2];
        if ((cmd === 'start' || cmd === 'restart') && (options.inspect || options.inspectBrk)) {
            (0, util_1.error)('[!] Only support running command `w2 run` to activate inspector on whistle.');
            const argv = Array.prototype.slice.call(process.argv, 3);
            (0, util_1.info)('[i] Try to run command `w2 run' + (argv.length ? ' ' + argv.join(' ') : '') + '` instead of.');
            return process.exit(1);
        }
        const hash = options && options.storage && encodeURIComponent(options.storage);
        return path_1.default.join(__dirname, '../index.js') + (hash ? '#' + hash + '#' : '');
    },
    name: getName() || config_1.default.name,
    version: config_1.default.version,
    runCallback: function (err, options) {
        if (err) {
            showStartupInfo(err, options, true);
            return;
        }
        (0, util_1.showUsage)(false, options);
        console.log('Press [Ctrl+C] to stop ' + config_1.default.name + '...');
    },
    startCallback: showStartupInfo,
    restartCallback: function (err, options) {
        showStartupInfo(err, options, false, true);
    },
    stopCallback: function (err) {
        if (err === true) {
            (0, util_1.info)('[i] ' + config_1.default.name + ' killed.');
        }
        else if (err) {
            if (err.code === 'EPERM') {
                (0, util_1.showKillError)();
            }
            else {
                (0, util_1.error)('[!] ' + err.message);
            }
        }
        else {
            (0, status_1.showAll)(true);
        }
    }
});
starting_1.default.command('status').description('Show the running status');
starting_1.default.command('add [filepath]').description('Add rules from local js file (.whistle.js by default)');
starting_1.default.command('install').description('Install a whistle plugin');
starting_1.default.command('uninstall').description('Uninstall a whistle plugin');
starting_1.default.command('exec').description('Exec whistle plugin command');
starting_1.default
    .option('-D, --baseDir [baseDir]', 'set the configured storage root path', String, undefined)
    .option('-z, --certDir [directory]', 'set custom certificate store directory', String, undefined)
    .option('-l, --localUIHost [hostname]', 'set the domain for the web ui (' + config_1.default.localUIHost + ' by default)', String, undefined)
    .option('-L, --pluginHost [hostname]', 'set the domain for the web ui of plugin  (as: "script=a.b.com&vase=x.y.com")', String, undefined)
    .option('-n, --username [username]', 'set the username to access the web ui', String, undefined)
    .option('-w, --password [password]', 'set the password to access the web ui', String, undefined)
    .option('-N, --guestName [username]', 'set the the guest name to access the web ui (can only view the data)', String, undefined)
    .option('-W, --guestPassword [password]', 'set the guest password to access the web ui (can only view the data)', String, undefined)
    .option('-s, --sockets [number]', 'set the max number of cached connections on each domain (' + config_1.default.sockets + ' by default)', parseInt, undefined)
    .option('-S, --storage [newStorageDir]', 'set the configured storage directory', String, undefined)
    .option('-C, --copy [storageDir]', 'copy the configuration of the specified directory to a new directory', String, undefined)
    .option('-c, --dnsCache [time]', 'set the cache time of DNS (60000ms by default)', String, undefined)
    .option('-H, --host [boundHost]', 'set the bound host (INADDR_ANY by default)', String, undefined)
    .option('-p, --port [proxyPort]', 'set the proxy port (' + config_1.default.port + ' by default)', String, undefined)
    .option('-P, --uiport [uiport]', 'set the webui port', String, undefined)
    .option('-m, --middlewares [script path or module name]', 'set the express middlewares loaded at startup (as: xx,yy/zz.js)', String, undefined)
    .option('-M, --mode [mode]', 'set the starting mode (as: pureProxy|debug|multiEnv|capture|disableH2|network|rules|plugins|prod)', String, undefined)
    .option('-t, --timeout [ms]', 'set the request timeout (' + config_1.default.timeout + 'ms by default)', parseInt, undefined)
    .option('-e, --extra [extraData]', 'set the extra parameters for plugin', String, undefined)
    .option('-f, --secureFilter [secureFilter]', 'set the path of secure filter', String, undefined)
    .option('-r, --shadowRules [shadowRules]', 'set the shadow (default) rules', String, undefined)
    .option('-R, --reqCacheSize [reqCacheSize]', 'set the cache size of request data (600 by default)', String, undefined)
    .option('-F, --frameCacheSize [frameCacheSize]', "set the cache size of webSocket and socket's frames (512 by default)", String, undefined)
    .option('-A, --addon [pluginPaths]', 'add custom plugin paths', String, undefined)
    .option('--config [workers]', 'start the cluster server and set worker number (os.cpus().length by default)', String, undefined)
    .option('--cluster [config]', 'load the startup config from a local file', String, undefined)
    .option('--dnsServer [dnsServer]', 'set custom dns servers', String, undefined)
    .option('--socksPort [socksPort]', 'set the socksv5 server port', String, undefined)
    .option('--httpPort [httpPort]', 'set the http server port', String, undefined)
    .option('--httpsPort [httpsPort]', 'set the https server port', String, undefined)
    .option('--no-global-plugins', 'do not load any globally installed plugins')
    .option('--no-prev-options', 'do not reuse the previous options when restarting')
    .option('--inspect [[host:]port]', 'activate inspector on host:port (127.0.0.1:9229 by default)')
    .option('--inspectBrk [[host:]port]', 'activate inspector on host:port and break at start of user script (127.0.0.1:9229 by default)');
let argv = process.argv;
let cmd = argv[2];
let storage;
const removeItem = function (list, name) {
    const i = list.indexOf(name);
    i !== -1 && list.splice(i, 1);
};
if (cmd === 'status') {
    const all = argv[3] === '--all' || argv[3] === '-l';
    if (argv[3] === '-S') {
        storage = argv[4];
    }
    (0, status_1.showStatus)(all, storage);
}
else if (/^([a-z]{1,2})?uni(nstall)?$/.test(cmd)) {
    plugin.uninstall(Array.prototype.slice.call(argv, 3));
}
else if (/^([a-z]{1,2})?i(nstall)?$/.test(cmd)) {
    cmd = (RegExp.$1 || '') + 'npm';
    argv = Array.prototype.slice.call(argv, 3);
    removeItem(argv, '-g');
    removeItem(argv, '--global');
    plugin.install(cmd, argv);
}
else if (cmd === 'use' || cmd === 'enable' || cmd === 'add') {
    const index = argv.indexOf('--force');
    const force = index !== -1;
    if (force) {
        argv.splice(index, 1);
    }
    let filepath = argv[3];
    if (filepath === '-S') {
        filepath = '';
        storage = argv[4];
    }
    else if (argv[4] === '-S') {
        storage = argv[5];
    }
    if (filepath && /^-/.test(filepath)) {
        filepath = '';
    }
    (0, use_1.useRules)(filepath, storage, force);
}
else if ((cmd === 'run' || cmd === 'exec') && argv[3] && /^[^-]/.test(argv[3])) {
    cmd = argv[3];
    argv = Array.prototype.slice.call(argv, 4);
    plugin.run(cmd, argv);
}
else {
    const pluginIndex = argv.indexOf('--pluginPaths');
    if (pluginIndex !== -1) {
        argv[pluginIndex] = '--addon';
    }
    starting_1.default.parse(argv);
}
