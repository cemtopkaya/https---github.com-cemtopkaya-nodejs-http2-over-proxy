"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.showStatus = exports.showAll = void 0;
const tslib_1 = require("tslib");
const q_1 = tslib_1.__importDefault(require("q"));
const safe_1 = tslib_1.__importDefault(require("colors/safe"));
const import_pkg_1 = require("../lib/import-pkg");
const util = tslib_1.__importStar(require("./util"));
const isRunning = util.isRunning;
const showUsage = util.showUsage;
const readConfig = util.readConfig;
const readConfigList = util.readConfigList;
const warn = util.warn;
const info = util.info;
function showAll(byStop) {
    const list = readConfigList().map(function (config) {
        const deferred = q_1.default.defer();
        isRunning(config.pid, function (running) {
            deferred.resolve(running && config);
        });
        return deferred.promise;
    });
    q_1.default.all(list).then(function (confList) {
        confList = confList.filter(function (conf) {
            return conf;
        });
        const len = confList.length;
        if (!len) {
            warn('[!] No running whistle.');
        }
        else {
            const tips = ['[i] All running whistle:'];
            confList.forEach(function (conf, i) {
                ++i;
                const options = conf.options;
                tips.push('  ' +
                    i +
                    '.' +
                    (conf.pid ? ' PID: ' + conf.pid + ',' : '') +
                    ' Port: ' +
                    (options.port || import_pkg_1.pkgInfo.port) +
                    (options.host ? ', Host: ' + options.host : '') +
                    (options.storage ? ', Storage: ' + options.storage : '') +
                    (byStop
                        ? safe_1.default.red(' (Stop cmd: ' +
                            (options.storage
                                ? 'w2 stop -S ' + options.storage
                                : 'w2 stop') +
                            ')')
                        : ''));
            });
            byStop && warn('[!] This whistle is not running.');
            info(tips.join('\n'));
        }
    });
    // All running whistle:
    // 1. port: 8899
    // 2. port: 888, storage: xxx
}
exports.showAll = showAll;
function showStatus(all, storage) {
    if (!all) {
        const config = readConfig(storage) || '';
        const pid = config.pid;
        const options = pid && config.options;
        if (pid) {
            isRunning(pid, function (running) {
                if (running) {
                    return showUsage(true, options);
                }
                showAll();
            });
            return;
        }
    }
    showAll();
}
exports.showStatus = showStatus;
