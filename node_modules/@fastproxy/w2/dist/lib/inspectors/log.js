"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inspectLog = void 0;
const tslib_1 = require("tslib");
const pipestream_1 = require("pipestream");
const import_pkg_1 = require("../import-pkg");
const util = tslib_1.__importStar(require("../util"));
const config_1 = tslib_1.__importDefault(require("../config"));
const logScriptFile = import_pkg_1.path.join(config_1.default.ASSESTS_PATH, 'js/log.js');
const logScript = import_pkg_1.fs.readFileSync(logScriptFile, { encoding: 'utf8' });
const logHtmlScript = '<!DOCTYPE html>\r\n<script>' + logScript + '</script>\r\n';
const LOG_ID_RE = /^log:\/\/(\{[^\s]{1,36}\}|[^/\\{}()<>\s]{1,36})$/;
function wrapScript(script, isHtml) {
    return isHtml ? '\r\n<script>' + script + '</script>\r\n' : '\r\n' + script + '\r\n';
}
function getScript(host, isHtml, req) {
    host = util.getInternalHost(req, host);
    let logCgiPath = config_1.default.WEBUI_PATH + 'log.' + config_1.default.port + '/cgi-bin/log/set';
    const result = isHtml ? logHtmlScript : logScript;
    logCgiPath = (req.isHttps ? 'https://' : 'http://') + host + logCgiPath;
    return result.replace('$LOG_CGI', logCgiPath);
}
function inspectLog(req, res, next) {
    const log = req.rules.log;
    if (log) {
        util.disableReqCache(req.headers);
        const host = req.headers.host;
        res.on('src', function (_res) {
            let topScript;
            let isHtml;
            if (util.supportHtmlTransform(_res, req)) {
                isHtml = true;
                topScript = getScript(host, isHtml, req);
            }
            else if (util.getContentType(_res.headers) == 'JS') {
                topScript = getScript(host, isHtml, req);
            }
            if (topScript) {
                const enable = req.enable;
                topScript = topScript.replace(/\$INTERCEPT_CONSOLE/g, !req.disable.interceptConsole || !!enable.interceptConsole);
                !enable.keepAllCSP && util.disableCSP(_res.headers);
                !req._customCache && util.disableResStore(_res.headers);
                let userScript;
                const transform = new pipestream_1.Transform();
                let added;
                transform._transform = function (chunk, _encoding, callback) {
                    if (!added) {
                        added = true;
                        let logId = '';
                        let isValue;
                        if (LOG_ID_RE.test(log.matcher)) {
                            logId = RegExp.$1;
                            if (logId[0] === '{') {
                                logId = logId.slice(1, -1);
                                isValue = true;
                            }
                            try {
                                logId = encodeURIComponent(logId);
                            }
                            catch (e) { }
                        }
                        util.getRuleValue(logId && !isValue ? null : log, function (script) {
                            topScript = topScript.replace('$LOG_ID', logId);
                            const buf = [util.toBuffer(topScript)];
                            userScript = script || null;
                            if (userScript) {
                                userScript = util.toBuffer(wrapScript(userScript, isHtml));
                                if (isHtml || !chunk) {
                                    buf.push(userScript);
                                    userScript = null;
                                }
                            }
                            chunk && buf.push(chunk);
                            callback(null, Buffer.concat(buf));
                        }, null, null, null, req);
                    }
                    else {
                        callback(null, chunk || userScript);
                    }
                };
                res.addZipTransform(transform, false, true);
            }
        });
    }
    next();
}
exports.inspectLog = inspectLog;
