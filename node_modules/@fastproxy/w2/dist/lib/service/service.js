"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
Promise.resolve().then(() => tslib_1.__importStar(require('../util/patch')));
const import_pkg_1 = require("../import-pkg");
const util = tslib_1.__importStar(require("./util"));
const extract_saz_1 = tslib_1.__importDefault(require("./extract-saz"));
const generate_saz_1 = tslib_1.__importDefault(require("./generate-saz"));
const SESSIONS_FILE_RE = /\.(txt|json|saz)$/i;
const LIMIT_SIZE = 1024 * 1024 * 128;
const storage = import_pkg_1.multer.memoryStorage();
const upload = (0, import_pkg_1.multer)({
    storage: storage,
    fieldSize: LIMIT_SIZE
});
function sessionsHandler() {
    const app = (0, import_pkg_1.express)();
    app.use(function (req, res, next) {
        req.on('error', abort);
        res.on('error', abort);
        function abort() {
            res.destroy();
        }
        next();
    });
    app.use('/cgi-bin/sessions/import', upload.single('importSessions'), function (req, res) {
        const file = req.file;
        let suffix;
        if (file && SESSIONS_FILE_RE.test(file.originalname)) {
            suffix = RegExp.$1.toLowerCase();
        }
        if (!suffix || !Buffer.isBuffer(file.buffer)) {
            return res.json([]);
        }
        if (suffix !== 'saz') {
            const sessions = util.parseJSON(file.buffer + '');
            return res.json(Array.isArray(sessions) ? sessions : []);
        }
        try {
            (0, extract_saz_1.default)(file.buffer, res.json.bind(res));
        }
        catch (e) {
            res.status(500).send(e.stack);
        }
    });
    app.use(import_pkg_1.bodyParser.urlencoded({ extended: true, limit: LIMIT_SIZE }));
    app.use(import_pkg_1.bodyParser.json());
    app.use('/cgi-bin/sessions/export', function (req, res) {
        const body = req.body;
        const type = body.exportFileType;
        const sessions = type === 'Fiddler' ? (0, generate_saz_1.default)(body) : body.sessions;
        res.attachment(util.getFilename(type, body.exportFilename)).send(sessions);
    });
    return app;
}
function default_1(_, callback) {
    (0, import_pkg_1.getAgentServer)(function (server, port) {
        server.on('request', sessionsHandler());
        callback(null, { port: port });
    });
}
exports.default = default_1;
