"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const init_1 = require("../biz/init");
const biz_1 = require("../biz");
const import_pkg_1 = require("./import-pkg");
const util = tslib_1.__importStar(require("./util"));
const logger_1 = tslib_1.__importDefault(require("./util/logger"));
const rules = tslib_1.__importStar(require("./rules"));
const https_1 = require("./https");
const httpsUtil = tslib_1.__importStar(require("./https/ca"));
const rulesUtil = tslib_1.__importStar(require("./rules/util"));
const data_server_1 = tslib_1.__importDefault(require("./util/data-server"));
const log_server_1 = tslib_1.__importDefault(require("./util/log-server"));
const plugins_1 = require("./plugins");
const config_1 = tslib_1.__importDefault(require("./config"));
const service_1 = tslib_1.__importDefault(require("./service"));
const socket_mgr_1 = tslib_1.__importDefault(require("./socket-mgr"));
const tunnel_1 = tslib_1.__importDefault(require("./tunnel"));
const upgrade_1 = tslib_1.__importDefault(require("./upgrade"));
const process_1 = tslib_1.__importDefault(require("./util/process"));
const perf = tslib_1.__importStar(require("./util/perf"));
const load_cert_1 = tslib_1.__importDefault(require("./https/load-cert"));
const common = tslib_1.__importStar(require("./util/common"));
const init_2 = require("./init");
const inspectors_1 = require("./inspectors");
const handlers_1 = require("./handlers");
const debug = (0, debug_1.default)('@w2.lib.index');
function handleClientError(err, socket) {
    if (!socket.writable) {
        return socket.destroy(err);
    }
    const errCode = err && err.code;
    const statusCode = errCode === 'HPE_HEADER_OVERFLOW' ? 431 : 400;
    const stack = util.getErrorStack('clientError: Bad request' + (errCode ? ' (' + errCode + ')' : ''));
    socket.end('HTTP/1.1 ' + statusCode + ' Bad Request\r\n\r\n' + stack);
}
function proxy(callback, _server) {
    const app = (0, import_pkg_1.express)();
    const server = _server || import_pkg_1.http.createServer();
    const middlewares = [init_2.initMiddleware, biz_1.bizMiddleware, ...inspectors_1.inspectMiddlewares]
        .concat(config_1.default.middlewares)
        .concat(handlers_1.handlerMiddlewars);
    server.timeout = config_1.default.timeout;
    const proxyEvents = new import_pkg_1.EventEmitter();
    proxyEvents.config = config_1.default;
    proxyEvents.server = server;
    app.disable('x-powered-by');
    app.logger = logger_1.default;
    middlewares.forEach(function (mw) {
        if (mw) {
            debug('use middleware ', mw);
            app.use((typeof mw === 'string' ? require(mw) : mw).bind(proxyEvents));
        }
    });
    server.on('clientError', handleClientError);
    plugins_1.pluginMgr.setProxy(proxyEvents);
    perf.setProxy(proxyEvents);
    (0, socket_mgr_1.default)(proxyEvents);
    (0, https_1.setup)(server, proxyEvents);
    exportInterfaces(proxyEvents);
    (0, tunnel_1.default)(server, proxyEvents);
    (0, upgrade_1.default)(server);
    (0, data_server_1.default)(proxyEvents);
    (0, log_server_1.default)(proxyEvents);
    rulesUtil.setup(proxyEvents);
    const properties = rulesUtil.properties;
    if (config_1.default.disableAllRules) {
        properties.set('disabledAllRules', true);
    }
    else if (config_1.default.disableAllRules === false) {
        properties.set('disabledAllRules', false);
    }
    if (config_1.default.disableAllPlugins) {
        properties.set('disabledAllPlugins', true);
    }
    else if (config_1.default.disableAllPlugins === false) {
        properties.set('disabledAllPlugins', false);
    }
    if (config_1.default.allowMultipleChoice) {
        properties.set('allowMultipleChoice', true);
    }
    else if (config_1.default.allowMultipleChoice === false) {
        properties.set('allowMultipleChoice', false);
    }
    rulesUtil.addValues(config_1.default.values, config_1.default.replaceExistValue);
    rulesUtil.addRules(config_1.default.rules, config_1.default.replaceExistRule);
    config_1.default.debug && rules.disableDnsCache();
    let count = _server ? 1 : 2;
    const execCallback = function () {
        if (--count === 0) {
            process.whistleStarted = true;
            process.emit('whistleStarted');
            typeof callback === 'function' && callback.call(server, proxyEvents);
        }
    };
    !_server &&
        util.getBoundIp(config_1.default.host, function (host) {
            util.checkPort(!config_1.default.INADDR_ANY && !host && config_1.default.port, function () {
                config_1.default.host = host;
                server.listen(config_1.default.port, host, execCallback);
            });
        });
    const createNormalServer = function (port, httpModule, opts) {
        if (!port) {
            return;
        }
        ++count;
        const optionServer = httpModule.createServer(opts);
        const isHttps = !!opts;
        proxyEvents[isHttps ? 'httpsServer' : 'httpServer'] = optionServer;
        optionServer.on('request', function (req, res) {
            req.isHttps = isHttps;
            // FIXME: 确认下app有handle方法吗?
            app.handle(req, res);
        });
        optionServer.isHttps = isHttps;
        (0, tunnel_1.default)(optionServer, proxyEvents, isHttps ? 1 : 2);
        (0, upgrade_1.default)(optionServer);
        optionServer.on('clientError', handleClientError);
        util.getBoundIp(config_1.default[isHttps ? 'httpsHost' : 'httpHost'], function (host) {
            util.checkPort(!config_1.default.INADDR_ANY && !host && port, function () {
                optionServer.listen(port, host, execCallback);
            });
        });
    };
    createNormalServer(config_1.default.httpPort, import_pkg_1.http);
    createNormalServer(config_1.default.httpsPort, import_pkg_1.https, (0, import_pkg_1.extend)({
        SNICallback: function (servername, callback) {
            const curUrl = 'https://' + servername;
            (0, load_cert_1.default)({
                isHttpsServer: true,
                fullUrl: curUrl,
                curUrl: curUrl,
                useSNI: true,
                headers: {},
                servername: servername,
                serverName: servername,
                commonName: httpsUtil.getDomain(servername)
            }, function () {
                httpsUtil.SNICallback(servername, callback);
            });
        }
    }, httpsUtil.createCertificate('*.wproxy.org')));
    if (config_1.default.socksPort) {
        ++count;
        let boundHost;
        const socksServer = import_pkg_1.socks.createServer(function (info, accept, deny) {
            const dstPort = info.dstPort;
            const dstAddr = info.dstAddr;
            const connPath = dstAddr + ':' + dstPort;
            const headers = { host: connPath };
            headers['x-whistle-server'] = 'socks';
            if (config_1.default.socksMode ||
                (dstPort != 80 &&
                    dstPort != 443 &&
                    (dstPort != config_1.default.port || (!util.isLocalAddress(dstAddr) && !config_1.default.isLocalUIUrl(dstAddr))))) {
                headers['x-whistle-policy'] = 'tunnel';
            }
            let client = import_pkg_1.http.request({
                method: 'CONNECT',
                agent: false,
                path: connPath,
                host: boundHost,
                port: config_1.default.port,
                headers: headers
            });
            const destroy = function () {
                if (client) {
                    client.abort();
                    client = null;
                    deny();
                }
            };
            client.on('error', destroy);
            client.on('connect', function (res, socket) {
                socket.on('error', destroy);
                if (res.statusCode !== 200) {
                    return destroy();
                }
                const reqSock = accept(true);
                if (reqSock) {
                    reqSock.pipe(socket).pipe(reqSock);
                }
                else {
                    destroy();
                }
            });
            client.end();
        });
        proxyEvents.socksServer = socksServer;
        util.getBoundIp(config_1.default.socksHost, (host) => {
            boundHost = host || '127.0.0.1';
            util.checkPort(!config_1.default.INADDR_ANY && !host && config_1.default.socksPort, function () {
                socksServer.listen(config_1.default.socksPort, host, execCallback);
            });
            socksServer.useAuth(import_pkg_1.socks.auth.None());
        });
    }
    (0, init_1.initBiz)(proxyEvents, function () {
        server.on('request', app);
        execCallback();
    });
    return proxyEvents;
}
function exportInterfaces(obj) {
    obj.getWhistlePath = common.getWhistlePath;
    obj.rules = rules;
    obj.util = util;
    obj.rulesUtil = rulesUtil;
    obj.rulesMgr = rules;
    obj.httpsUtil = httpsUtil;
    obj.pluginMgr = plugins_1.pluginMgr;
    obj.logger = logger_1.default;
    obj.loadService = service_1.default;
    obj.setAuth = config_1.default.setAuth;
    obj.setUIHost = config_1.default.setUIHost;
    obj.setPluginUIHost = config_1.default.setPluginUIHost;
    obj.socketMgr = socket_mgr_1.default;
    obj.getRuntimeInfo = function () {
        return process_1.default;
    };
    obj.getShadowRules = function () {
        return config_1.default.shadowRules;
    };
    obj.setShadowRules = function (shadowRules) {
        if (typeof shadowRules === 'string') {
            config_1.default.shadowRules = shadowRules;
            rulesUtil.parseRules();
        }
    };
    return obj;
}
function handleGlobalException(err) {
    const code = err && err.code;
    if (code === 'EPIPE' ||
        code === 'ERR_HTTP2_ERROR' ||
        code === 'ENETUNREACH' ||
        code === 'ERR_HTTP_TRAILER_INVALID' ||
        code === 'ERR_INTERNAL_ASSERTION' ||
        (err && /finishwrite/i.test(err.message))) {
        return;
    }
    if (!err || (code !== 'ERR_IPC_CHANNEL_CLOSED' && code !== 'ERR_IPC_DISCONNECTED')) {
        const stack = util.getErrorStack(err);
        common.writeLogSync('\r\n' + stack + '\r\n');
        /*eslint no-console: "off"*/
        console.error(stack);
        if (typeof process.handleUncauthtWhistleErrorMessage === 'function' &&
            process.handleUncauthtWhistleErrorMessage(stack, err) === false) {
            return;
        }
    }
    setTimeout(function () {
        process.exit(1);
    }, 360);
}
process.on('unhandledRejection', handleGlobalException);
process.on('uncaughtException', handleGlobalException);
config_1.default.addInitHook(() => rulesUtil.parseRules());
exports.default = exportInterfaces(proxy);
