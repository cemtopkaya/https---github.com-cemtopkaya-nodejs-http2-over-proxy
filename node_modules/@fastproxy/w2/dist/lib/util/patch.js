"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listenerCount = void 0;
const tslib_1 = require("tslib");
const events_1 = require("events");
const stream_1 = require("stream");
const net_1 = require("net");
const http_1 = tslib_1.__importDefault(require("http"));
const https_1 = tslib_1.__importDefault(require("https"));
const hparser_1 = tslib_1.__importDefault(require("hparser"));
const httpRequest = http_1.default.request;
const httpsRequest = https_1.default.request;
const res = http_1.default.OutgoingMessage.prototype;
const noop = function () { };
const INVALID_PATH_RE = /[^\u0021-\u00ff]/;
const INVALID_PATH_RE_G = /[^\u0021-\u00ff]/g;
const HOST_RE = /^host$/i;
process.emitWarning = noop;
//see: https://github.com/joyent/node/issues/9272
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
const setHeader = res.setHeader;
res.setHeader = function (field, val) {
    try {
        return setHeader.call(this, field, val);
    }
    catch (e) {
        return undefined;
    }
};
function listenerCount(emitter, eventName) {
    if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(eventName);
    }
    return events_1.EventEmitter.listenerCount(emitter, eventName);
}
exports.listenerCount = listenerCount;
const proto = net_1.Socket.prototype;
const destroy = proto.destroy;
const on = proto.on;
// 避免第三方模块没处理好异常导致程序crash
proto.destroy = function (err) {
    if (this.destroyed) {
        return;
    }
    if (err && !listenerCount(this, 'error')) {
        this.on('error', noop);
    }
    return destroy.call(this, err);
};
// 避免一些奇奇怪怪的异常，导致整个进程 crash
// 如：Error: This socket has been ended by the other party
const wrapOn = function () {
    const evt = arguments[0];
    if (this.on === wrapOn) {
        this.on = on;
    }
    if (evt !== 'error' && !listenerCount(this, 'error')) {
        on.call(this, 'error', noop);
    }
    return on.apply(this, arguments);
};
proto.on = wrapOn;
function filterInvalidPath(options) {
    if (!options) {
        return options;
    }
    if (typeof options === 'string') {
        if (INVALID_PATH_RE.test(options)) {
            return options.replace(INVALID_PATH_RE_G, '');
        }
    }
    else if (options.path && INVALID_PATH_RE.test(options.path)) {
        options.path = String(options.path).replace(INVALID_PATH_RE_G, '');
    }
    return options;
}
function hackRequest(requestFn, self, args, isApply) {
    let client;
    try {
        client = requestFn[isApply ? 'apply' : 'call'](self, args);
        const end = client.end;
        client.end = function () {
            try {
                end.apply(this, arguments);
            }
            catch (e1) {
                client.emit('error', e1);
            }
        };
    }
    catch (e2) {
        client = new stream_1.PassThrough();
        process.nextTick(function () {
            client.emit('error', e2);
        });
    }
    return client.on('error', noop);
}
https_1.default.request = function () {
    return hackRequest(httpsRequest, this, arguments, true);
};
http_1.default.request = function (options) {
    const tunnelPath = options && options.method === 'CONNECT' && options.proxyTunnelPath;
    options = filterInvalidPath(options);
    if (!tunnelPath) {
        return hackRequest(httpRequest, this, arguments, true);
    }
    const client = hackRequest(httpRequest, this, options);
    const on = client.on;
    client.on = function (type, listener) {
        if (type !== 'connect') {
            return on.apply(this, arguments);
        }
        on.call(this, type, function (res, socket, head) {
            socket.on('error', noop);
            if (res.statusCode !== 200) {
                return listener.apply(this, arguments);
            }
            let headers = {};
            let isHost;
            if (options.headers) {
                isHost = options.headers.Host;
                Object.keys(options.headers).forEach(function (key) {
                    if (!HOST_RE.test(key)) {
                        headers[key] = options.headers[key];
                    }
                });
            }
            headers[isHost ? 'Host' : 'host'] = tunnelPath;
            if (options.enableIntercept) {
                headers['x-whistle-policy'] = 'intercept';
                delete headers['X-Whistle-Policy'];
            }
            headers = hparser_1.default.getRawHeaders(headers);
            let rawData = [
                'CONNECT ' + tunnelPath + ' HTTP/1.1',
                headers,
                '\r\n'
            ].join('\r\n');
            if (res.statusCode === 200 && res.headers['x-whistle-allow-tunnel-ack']) {
                rawData = '1' + rawData;
            }
            socket.write(rawData);
            hparser_1.default.parse(socket, function (err, _res) {
                if (err) {
                    return client.emit('error', err);
                }
                res.statusCode = parseInt(_res.statusCode, 10);
                res.headers = _res.headers;
                !options.keepStreamResume && socket.pause();
                listener.call(this, res, socket, head);
            }, true);
        });
        return this;
    };
    return client;
};
