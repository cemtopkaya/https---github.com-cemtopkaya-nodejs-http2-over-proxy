"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MAX_LENGTH = 512;
const MIN_LENGTH = 420;
const SIZE = 1024 * 64;
const COUNT = 100;
let logs = [];
let count = 0;
function sliceLogs(index, count, logId) {
    if (!logId) {
        return logs.slice(index, index + count);
    }
    const result = [];
    for (const len = logs.length; index < len; index++) {
        const log = logs[index];
        if (log.logId === logId) {
            result.push(log);
            if (--count <= 0) {
                return result;
            }
        }
    }
    return result;
}
function getLogs(startTime, count, logId) {
    const len = logs.length;
    if (!len || startTime == -1) {
        return [];
    }
    count = Math.min(count || COUNT, len);
    if (startTime === 0) {
        return logs.slice(-1);
    }
    if (startTime != -2 && startTime) {
        for (let i = 0; i < len; i++) {
            const log = logs[i];
            if (log.id === startTime) {
                return sliceLogs(i + 1, count, logId);
            }
        }
    }
    return sliceLogs(0, count, logId);
}
function init(proxy) {
    proxy.addLog = function set(log) {
        if (!log) {
            return;
        }
        const now = Date.now();
        let text = log.text;
        if (text == null) {
            text = '';
        }
        else if (typeof text !== 'string') {
            text += '';
        }
        logs.push({
            id: now + '-' + ++count,
            logId: log.id,
            date: now,
            level: /^fatal|error|warn|info|debug$/.test(log.level) ? log.level : 'info',
            text: text.substring(0, SIZE)
        });
        const len = logs.length;
        if (len > MAX_LENGTH) {
            logs = logs.slice(len - MIN_LENGTH, len);
        }
    };
    proxy.getLogs = getLogs;
    proxy.getLatestId = function () {
        const last = logs[logs.length - 1];
        return last && last.id;
    };
}
exports.default = init;
